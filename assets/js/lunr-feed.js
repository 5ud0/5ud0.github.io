!function(){var a=function(b){var c=new a.Index;return c.pipeline.add(a.trimmer,a.stopWordFilter,a.stemmer),b&&b.call(c,c),c};a.version="0.6.0",a.utils={},a.utils.warn=function(b){return function(c){b.console&&console.warn&&console.warn(c)}}(this),a.utils.asString=function(b){return void 0===b||null===b?"":b.toString()},a.EventEmitter=function(){this.events={}},a.EventEmitter.prototype.addListener=function(){var b=Array.prototype.slice.call(arguments),c=b.pop(),d=b;if("function"!=typeof c){throw new TypeError("last argument must be a function")}d.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(c)},this)},a.EventEmitter.prototype.removeListener=function(b,c){if(this.hasHandler(b)){var d=this.events[b].indexOf(c);this.events[b].splice(d,1),this.events[b].length||delete this.events[b]}},a.EventEmitter.prototype.emit=function(b){if(this.hasHandler(b)){var c=Array.prototype.slice.call(arguments,1);this.events[b].forEach(function(d){d.apply(void 0,c)})}},a.EventEmitter.prototype.hasHandler=function(b){return b in this.events},a.tokenizer=function(b){return arguments.length&&null!=b&&void 0!=b?Array.isArray(b)?b.map(function(c){return a.utils.asString(c).toLowerCase()}):b.toString().trim().toLowerCase().split(a.tokenizer.seperator):[]},a.tokenizer.seperator=/[\s\-]+/,a.Pipeline=function(){this._stack=[]},a.Pipeline.registeredFunctions={},a.Pipeline.registerFunction=function(b,c){c in this.registeredFunctions&&a.utils.warn("Overwriting existing registered function: "+c),b.label=c,a.Pipeline.registeredFunctions[b.label]=b},a.Pipeline.warnIfFunctionNotRegistered=function(b){var c=b.label&&b.label in this.registeredFunctions;c||a.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",b)},a.Pipeline.load=function(b){var c=new a.Pipeline;return b.forEach(function(f){var d=a.Pipeline.registeredFunctions[f];if(!d){throw new Error("Cannot load un-registered function: "+f)}c.add(d)}),c},a.Pipeline.prototype.add=function(){var b=Array.prototype.slice.call(arguments);b.forEach(function(c){a.Pipeline.warnIfFunctionNotRegistered(c),this._stack.push(c)},this)},a.Pipeline.prototype.after=function(c,d){a.Pipeline.warnIfFunctionNotRegistered(d);var b=this._stack.indexOf(c);if(-1==b){throw new Error("Cannot find existingFn")}b+=1,this._stack.splice(b,0,d)},a.Pipeline.prototype.before=function(c,d){a.Pipeline.warnIfFunctionNotRegistered(d);var b=this._stack.indexOf(c);if(-1==b){throw new Error("Cannot find existingFn")}this._stack.splice(b,0,d)},a.Pipeline.prototype.remove=function(b){var c=this._stack.indexOf(b);-1!=c&&this._stack.splice(c,1)},a.Pipeline.prototype.run=function(c){for(var g=[],j=c.length,b=this._stack.length,f=0;j>f;f++){for(var h=c[f],d=0;b>d&&(h=this._stack[d](h,f,c),void 0!==h&&""!==h);d++){}void 0!==h&&""!==h&&g.push(h)}return g},a.Pipeline.prototype.reset=function(){this._stack=[]},a.Pipeline.prototype.toJSON=function(){return this._stack.map(function(b){return a.Pipeline.warnIfFunctionNotRegistered(b),b.label})},a.Vector=function(){this._magnitude=null,this.list=void 0,this.length=0},a.Vector.Node=function(b,c,d){this.idx=b,this.val=c,this.next=d},a.Vector.prototype.insert=function(d,g){this._magnitude=void 0;var b=this.list;if(!b){return this.list=new a.Vector.Node(d,g,b),this.length++}if(d<b.idx){return this.list=new a.Vector.Node(d,g,b),this.length++}for(var c=b,f=b.next;void 0!=f;){if(d<f.idx){return c.next=new a.Vector.Node(d,g,f),this.length++}c=f,f=f.next}return c.next=new a.Vector.Node(d,g,f),this.length++},a.Vector.prototype.magnitude=function(){if(this._magnitude){return this._magnitude}for(var b,c=this.list,d=0;c;){b=c.val,d+=b*b,c=c.next}return this._magnitude=Math.sqrt(d)},a.Vector.prototype.dot=function(c){for(var d=this.list,f=c.list,b=0;d&&f;){d.idx<f.idx?d=d.next:d.idx>f.idx?f=f.next:(b+=d.val*f.val,d=d.next,f=f.next)}return b},a.Vector.prototype.similarity=function(b){return this.dot(b)/(this.magnitude()*b.magnitude())},a.SortedSet=function(){this.length=0,this.elements=[]},a.SortedSet.load=function(b){var c=new this;return c.elements=b,c.length=b.length,c},a.SortedSet.prototype.add=function(){var b,c;for(b=0;b<arguments.length;b++){c=arguments[b],~this.indexOf(c)||this.elements.splice(this.locationFor(c),0,c)}this.length=this.elements.length},a.SortedSet.prototype.toArray=function(){return this.elements.slice()},a.SortedSet.prototype.map=function(b,c){return this.elements.map(b,c)},a.SortedSet.prototype.forEach=function(b,c){return this.elements.forEach(b,c)},a.SortedSet.prototype.indexOf=function(c){for(var f=0,h=this.elements.length,b=h-f,d=f+Math.floor(b/2),g=this.elements[d];b>1;){if(g===c){return d}c>g&&(f=d),g>c&&(h=d),b=h-f,d=f+Math.floor(b/2),g=this.elements[d]}return g===c?d:-1},a.SortedSet.prototype.locationFor=function(c){for(var f=0,h=this.elements.length,b=h-f,d=f+Math.floor(b/2),g=this.elements[d];b>1;){c>g&&(f=d),g>c&&(h=d),b=h-f,d=f+Math.floor(b/2),g=this.elements[d]}return g>c?d:c>g?d+1:void 0},a.SortedSet.prototype.intersect=function(j){for(var l=new a.SortedSet,c=0,g=0,k=this.length,f=j.length,b=this.elements,d=j.elements;;){if(c>k-1||g>f-1){break}b[c]!==d[g]?b[c]<d[g]?c++:b[c]>d[g]&&g++:(l.add(b[c]),c++,g++)}return l},a.SortedSet.prototype.clone=function(){var b=new a.SortedSet;return b.elements=this.toArray(),b.length=b.elements.length,b},a.SortedSet.prototype.union=function(c){var d,f,b;return this.length>=c.length?(d=this,f=c):(d=c,f=this),b=d.clone(),b.add.apply(b,f.toArray()),b},a.SortedSet.prototype.toJSON=function(){return this.toArray()},a.Index=function(){this._fields=[],this._ref="id",this.pipeline=new a.Pipeline,this.documentStore=new a.Store,this.tokenStore=new a.TokenStore,this.corpusTokens=new a.SortedSet,this.eventEmitter=new a.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},a.Index.prototype.on=function(){var b=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,b)},a.Index.prototype.off=function(b,c){return this.eventEmitter.removeListener(b,c)},a.Index.load=function(b){b.version!==a.version&&a.utils.warn("version mismatch: current "+a.version+" importing "+b.version);var c=new this;return c._fields=b.fields,c._ref=b.ref,c.documentStore=a.Store.load(b.documentStore),c.tokenStore=a.TokenStore.load(b.tokenStore),c.corpusTokens=a.SortedSet.load(b.corpusTokens),c.pipeline=a.Pipeline.load(b.pipeline),c},a.Index.prototype.field=function(b,c){var c=c||{},d={name:b,boost:c.boost||1};return this._fields.push(d),this},a.Index.prototype.ref=function(b){return this._ref=b,this},a.Index.prototype.add=function(j,l){var c={},g=new a.SortedSet,k=j[this._ref],l=void 0===l?!0:l;this._fields.forEach(function(h){var e=this.pipeline.run(a.tokenizer(j[h.name]));c[h.name]=e,a.SortedSet.prototype.add.apply(g,e)},this),this.documentStore.set(k,g),a.SortedSet.prototype.add.apply(this.corpusTokens,g.toArray());for(var f=0;f<g.length;f++){var b=g.elements[f],d=this._fields.reduce(function(h,m){var o=c[m.name].length;if(!o){return h}var i=c[m.name].filter(function(e){return e===b}).length;return h+i/o*m.boost},0);this.tokenStore.add(b,{ref:k,tf:d})}l&&this.eventEmitter.emit("add",j,this)},a.Index.prototype.remove=function(c,d){var f=c[this._ref],d=void 0===d?!0:d;if(this.documentStore.has(f)){var b=this.documentStore.get(f);this.documentStore.remove(f),b.forEach(function(e){this.tokenStore.remove(e,f)},this),d&&this.eventEmitter.emit("remove",c,this)}},a.Index.prototype.update=function(b,c){var c=void 0===c?!0:c;this.remove(b,!1),this.add(b,!1),c&&this.eventEmitter.emit("update",b,this)},a.Index.prototype.idf=function(c){var d="@"+c;if(Object.prototype.hasOwnProperty.call(this._idfCache,d)){return this._idfCache[d]}var f=this.tokenStore.count(c),b=1;return f>0&&(b=1+Math.log(this.documentStore.length/f)),this._idfCache[d]=b},a.Index.prototype.search=function(g){var j=this.pipeline.run(a.tokenizer(g)),c=new a.Vector,f=[],h=this._fields.reduce(function(i,k){return i+k.boost},0),d=j.some(function(e){return this.tokenStore.has(e)},this);if(!d){return[]}j.forEach(function(o,p,m){var i=1/m.length*this._fields.length*h,l=this,k=this.tokenStore.expand(o).reduce(function(w,e){var t=l.corpusTokens.indexOf(e),D=l.idf(e),C=1,x=new a.SortedSet;if(e!==o){var A=Math.max(3,e.length-o.length);C=1/Math.log(A)}t>-1&&c.insert(t,i*D*C);for(var y=l.tokenStore.get(e),q=Object.keys(y),z=q.length,B=0;z>B;B++){x.add(y[q[B]].ref)}return w.union(x)},new a.SortedSet);f.push(k)},this);var b=f.reduce(function(i,k){return i.intersect(k)});return b.map(function(e){return{ref:e,score:c.similarity(this.documentVector(e))}},this).sort(function(i,k){return k.score-i.score})},a.Index.prototype.documentVector=function(j){for(var l=this.documentStore.get(j),c=l.length,g=new a.Vector,k=0;c>k;k++){var f=l.elements[k],b=this.tokenStore.get(f)[j].tf,d=this.idf(f);g.insert(this.corpusTokens.indexOf(f),b*d)}return g},a.Index.prototype.toJSON=function(){return{version:a.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),tokenStore:this.tokenStore.toJSON(),corpusTokens:this.corpusTokens.toJSON(),pipeline:this.pipeline.toJSON()}},a.Index.prototype.use=function(b){var c=Array.prototype.slice.call(arguments,1);c.unshift(this),b.apply(this,c)},a.Store=function(){this.store={},this.length=0},a.Store.load=function(b){var c=new this;return c.length=b.length,c.store=Object.keys(b.store).reduce(function(e,d){return e[d]=a.SortedSet.load(b.store[d]),e},{}),c},a.Store.prototype.set=function(b,c){this.has(b)||this.length++,this.store[b]=c},a.Store.prototype.get=function(b){return this.store[b]},a.Store.prototype.has=function(b){return b in this.store},a.Store.prototype.remove=function(b){this.has(b)&&(delete this.store[b],this.length--)},a.Store.prototype.toJSON=function(){return{store:this.store,length:this.length}},a.stemmer=function(){var L={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},ad={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},V="[^aeiou]",Z="[aeiouy]",Q=V+"[^aeiouy]*",U=Z+"[aeiou]*",M="^("+Q+")?"+U+Q,ah="^("+Q+")?"+U+Q+"("+U+")?$",aa="^("+Q+")?"+U+Q+U+Q,J="^("+Q+")?"+Z,X=new RegExp(M),af=new RegExp(aa),ac=new RegExp(ah),R=new RegExp(J),ae=/^(.+?)(ss|i)es$/,H=/^(.+?)([^s])s$/,W=/^(.+?)eed$/,ab=/^(.+?)(ed|ing)$/,C=/.$/,q=/(at|bl|iz)$/,G=new RegExp("([^aeiouylsz])\\1$"),D=new RegExp("^"+Q+Z+"[^aeiouwxy]$"),Y=/^(.+?[^aeiou])y$/,ag=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,K=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,ai=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,I=/^(.+?)(s|t)(ion)$/,A=/^(.+?)e$/,z=/ll$/,B=new RegExp("^"+Q+Z+"[^aeiouwxy]$"),j=function(d){var f,b,c,m,k,g,l;if(d.length<3){return d}if(c=d.substr(0,1),"y"==c&&(d=c.toUpperCase()+d.substr(1)),m=ae,k=H,m.test(d)?d=d.replace(m,"$1$2"):k.test(d)&&(d=d.replace(k,"$1$2")),m=W,k=ab,m.test(d)){var e=m.exec(d);m=X,m.test(e[1])&&(m=C,d=d.replace(m,""))}else{if(k.test(d)){var e=k.exec(d);f=e[1],k=R,k.test(f)&&(d=f,k=q,g=G,l=D,k.test(d)?d+="e":g.test(d)?(m=C,d=d.replace(m,"")):l.test(d)&&(d+="e"))}}if(m=Y,m.test(d)){var e=m.exec(d);f=e[1],d=f+"i"}if(m=ag,m.test(d)){var e=m.exec(d);f=e[1],b=e[2],m=X,m.test(f)&&(d=f+L[b])}if(m=K,m.test(d)){var e=m.exec(d);f=e[1],b=e[2],m=X,m.test(f)&&(d=f+ad[b])}if(m=ai,k=I,m.test(d)){var e=m.exec(d);f=e[1],m=af,m.test(f)&&(d=f)}else{if(k.test(d)){var e=k.exec(d);f=e[1]+e[2],k=af,k.test(f)&&(d=f)}}if(m=A,m.test(d)){var e=m.exec(d);f=e[1],m=af,k=ac,g=B,(m.test(f)||k.test(f)&&!g.test(f))&&(d=f)}return m=z,k=af,m.test(d)&&k.test(d)&&(m=C,d=d.replace(m,"")),"y"==c&&(d=c.toLowerCase()+d.substr(1)),d};return j}(),a.Pipeline.registerFunction(a.stemmer,"stemmer"),a.generateStopWordFilter=function(b){var c=b.reduce(function(d,f){return d[f]=f,d},{});return function(d){return d&&c[d]!==d?d:void 0}},a.stopWordFilter=a.generateStopWordFilter(["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your"]),a.Pipeline.registerFunction(a.stopWordFilter,"stopWordFilter"),a.trimmer=function(b){return b.replace(/^\W+/,"").replace(/\W+$/,"")},a.Pipeline.registerFunction(a.trimmer,"trimmer"),a.TokenStore=function(){this.root={docs:{}},this.length=0},a.TokenStore.load=function(b){var c=new this;return c.root=b.root,c.length=b.length,c},a.TokenStore.prototype.add=function(c,f,g){var g=g||this.root,b=c.charAt(0),d=c.slice(1);return b in g||(g[b]={docs:{}}),0===d.length?(g[b].docs[f.ref]=f,void (this.length+=1)):this.add(d,f,g[b])},a.TokenStore.prototype.has=function(b){if(!b){return !1}for(var c=this.root,d=0;d<b.length;d++){if(!c[b.charAt(d)]){return !1}c=c[b.charAt(d)]}return !0},a.TokenStore.prototype.getNode=function(b){if(!b){return{}}for(var c=this.root,d=0;d<b.length;d++){if(!c[b.charAt(d)]){return{}}c=c[b.charAt(d)]}return c},a.TokenStore.prototype.get=function(b,c){return this.getNode(b,c).docs||{}},a.TokenStore.prototype.count=function(b,c){return Object.keys(this.get(b,c)).length},a.TokenStore.prototype.remove=function(c,d){if(c){for(var f=this.root,b=0;b<c.length;b++){if(!(c.charAt(b) in f)){return}f=f[c.charAt(b)]}delete f.docs[d]}},a.TokenStore.prototype.expand=function(c,d){var f=this.getNode(c),b=f.docs||{},d=d||[];return Object.keys(b).length&&d.push(c),Object.keys(f).forEach(function(e){"docs"!==e&&d.concat(this.expand(c+e,d))},this),d},a.TokenStore.prototype.toJSON=function(){return{root:this.root,length:this.length}},function(b,c){"function"==typeof define&&define.amd?define(c):"object"==typeof exports?module.exports=c():b.lunr=c()}(this,function(){return a})}();var index=lunr(function(){this.field("title");this.field("content",{boost:10});this.field("category");this.field("tags");this.ref("id")});index.add({title:"Machine Learning Beginner to Advance",category:null,content:"\n  I will be sharing every post that I read small to big here which deemed interesting and helps me grasp a better understanding on the particulat topic of Machine Learning concept.\nThis is like awesome-ml curated list of my own findings :)\n\n\n\nUnderstanding Statistics\n\n\nIntermediate Statistics  \n\nProbability and Mathematical Statistics  \n\n\nMachine Learning\n\n\nLearning from Data  \n\nMachine Learning  \n\n\nSVM [Support Vector Machines]\n\n\nSVM Understanding the math-Series  \n\n\nDeep Learning\n\n\nDeep Learning in PyTorch  \n\n\nCourse Series Resources\n\n\nStanford Lectures - Statistical Learning  \n\nQuora answer to video series getting started  \n\n\nOther Resources\n\n\nResources on Statistics  \n\nResources on ML &amp; R  \n\nResources on ML,Statistics  \n\nBooks to read on ML,AI  \n",tags:["read","ml","svm","series","resources"],id:0});index.add({title:"Bugbounty resources",category:null,content:"Here,I am gonna list all the resources i\u2019m gonna find on bug bounty that would be helpful\n\nBug Bounty resources  \n\n\n",tags:["read","bug_bounty","resources","learning"],id:1});index.add({title:"Learners Digest",category:null,content:"RubyonRails best getting started  \n\nPython for DataScience (SciPy Lecture Notes)  \n\n\n",tags:["read","python","rails","ruby","reference","language"],id:2});index.add({title:"Some More Sticky Links",category:null,content:"This is collection of articles one must read to be a better programmer\n\nModest list of programming blogs  \n\nMachine learning for hackers ;) . What\u2019s more you need :-D\n\nLeaf - Machine Learning for Hackers  \n",tags:["read","leaf","machine_learning","ml","data_science","sticky_link","link"],id:3});index.add({title:"Hacker News Bits",category:null,content:"Hackernews bookmarks - 12th April 2016 :\n\nKeras: Deep Learning library for Theano and TensorFlow\n\nKeras: Deep Learning library for Theano and TensorFlow  \n\nEmbedding Lua in the Web\n\nEmbedding Lua in the Web  \n\nWriting an OS in Rust\n\nWriting an OS in Rust  \n\nStatistics for Software\n\nStatistics for Software  \n\nFree Book on Deep Learning\n\nFree Book on Deep Learning  \n\nGetting started with F#\n\nGetting started with F#  \n\n\n",tags:["read","deep_learning","language","f#","lua","resource","hacker_news","machine_learning","python","keras"],id:4});index.add({title:"References - C++",category:null,content:"Some reads and references for C++ :\n\nBloom Filters in C++\n\nHow to write a Bloom filter in C++  \n\nJIT for C++\n\nJyt is a just-in-time compiler for C++  \n\n32bit integer compression algorithms in C++\n\n32bit integer compression algorithms  \n\n\n",tags:["read","C++","reference","algorithm","language"],id:5});index.add({title:"ML-Stciky Links",category:null,content:"ML references\n\nMachine Learning in theory :\n\nMachine Learning: An In-Depth, Non-Technical Guide\n  \n\nMachine Learning - Berkeley Blog\n  \n\nA Guide to Deep Learning\n  \n\nA Visual Introduction to Machine Learning\n  \n\nSome more links\n  \n\n\n",tags:["read","machine_learning","ml","series"],id:6});index.add({title:"Interface Architecture comparison",category:null,content:"This post differentiates different interface languages and their architectures :\n\nUNIDIRECTIONAL USER INTERFACE ARCHITECTURES\n  \n  \n",tags:["read","architecture","interface","elm","cyclejs","react"],id:7});index.add({title:"Place to programs",category:null,content:"Some places to practice for simple problems for grasping patterns in a language\n\nProject Euler  \n\nAdvent of Code  \n\nExercism  \n\n",tags:["read","language","elixir","programming","practice"],id:8});index.add({title:"Elixometer - Metrics for Elixr",category:null,content:"Elixometer is a metric collector for elixir applications which collects info from various part of the applications and displays nice graphical view of performance.\n\nThis tutorial explains everything pretty much and pretty well\n\nUsing Elixometer With Phoenix  \n\n\n",tags:["read","elixir","elixometer","resource"],id:9});index.add({title:"Nginx & Varnish Usage",category:null,content:"Posts for using nginx &amp; varnish\n\nNginx: a caching, thumbnailing, reverse proxying image server? \n\nUSING VARNISH CACHE AS A SECURED AWS S3 GATEWAY \n\n\n",tags:["read","nginx","varnish","usage","resource"],id:10});index.add({title:"Reads on RethinkDB",category:null,content:"RethinkDB is a open source realtime nosql database like Mongo but packed with several interesting features like changefeeds,realtime updates etc.\n\nPosts that I find useful for learning and while implementing rethinkdb in different projects.\n\nQuery RethinkDB tables from PostgreSQL with foreign data wrappers\n \n\n",tags:["read","rethinkdb","database","postgres","plugin"],id:11});index.add({title:"Simple Chat App with rethinkdb & pheonix",category:null,content:"There is no official rethinkdb adapter for phoenix.But the community plug is very good and ready to be used in production.\n\nThis post illustrates how to create a simple chat application using phoenix and rethinkdb :\n\nSimple Chat App in Elixir With Phoenix and RethinkDB  \n\n",tags:["read","rethinkdb","chat","application","phoenix"],id:12});index.add({title:"Hackernews Bits - 13216",category:null,content:"Interesting bits and frameworks I found on hackernews for future read :\n\nEinstein\u2019s Zurich Notebook  \n\nParity - Ethereum client written in Rust  \n\nMJML - Responsive Email framework  \n\n",tags:["read","mjml","einstein","parity","framework","language"],id:13});index.add({title:"BigchainDB",category:null,content:"A Database based on blockchain technology with ultra modern features.\n\nIt is said to have the capicity for 1M w/s,linear scaling and others.\n\nThing to lookout to in future:\n\nBigchain Database  \n\n",tags:["read","bigchain","database"],id:14});index.add({title:"Server Side Elm with Phoenix",category:null,content:"Server side rendering of view files of elm with phoenix on server\n\nServer side Elm with Phoenix  \n\n",tags:["read","elm","phoenix","render","server"],id:15});index.add({title:"Guardian DB Elixir Auth Plug",category:null,content:"This is a excellent minimal authentication plug module for elixir goes well with uberauth.\n\nThis tutorial explains everything pretty much and pretty well\n\nGuardian Auth Blog Posts  \n\n",tags:["read","elixir","auth","jwt","guardian"],id:16});index.add({title:"Comparison on usecase of different databases",category:null,content:"This is a really helpful post on all the popular databases,their descriptions and the use cases.\n\nThese are the databases that are compared in the post:\n\nRedis , Cassandra , MongoDB , Elastic Search , CouchDB , HBase , Accumulo , Hypertable , OrientDB , Neo4j , Couchbase , Riak , Scalaris , VoltDB , Aerospike , Kyoto Tycoon , RethinkDB\n\nDatabase Comparison &amp; Usecases  \n\n",tags:["read","database","comparison","usecase"],id:17});index.add({title:"Phoenix - Elixir : Places to look",category:null,content:"These are all the best places I can find for the solutions on phoenix and elixir in general.\n\nElixir Status\n\nHere, there will be updates of any new projects,developments and posts related to elixir!\n\nElixir Status  \n\nConfiguring phoenix with Webpack rather than Brunch\n\nReact people like webpack since it goes really well with all of it\u2019s modules with minimal setup.This explains how to replace brunch with webpack\n\nAutomatically Building Your Phoenix Assets With Webpack  \n\nUsing Webpack with Phoenix and Elixir  \n\nDockyard Articles Exlir and Phoenix\n\nSome of these articles are written by Chris McCord who wrote phoenix framework and maintaining it.\n\nArticles on Phoenix  \n\nArticles on Elixir  \n\nSetting up Elm with Phoenix\n\nElm is elixir for frontend and they both go along really well.This is a 3 min read article about how to mix and match both together!\n\nSetting up Elm with Phoenix  \n\nElm, Phoenix and Webpack\n\nThis really helps boost your project setting up elm,phoenix and webpack.\n\nUsing Webpack with Phoenix and Elm\n  \n\nBuilding Trello clone with Phoenx and React\n\nTrello clone with Phoenix and React  \n\nOther related blog posts :\n\nHigh Performance Browser Networking  \n\nPost Reads\n\nElixir Posts  \n\nLearning Elixir Blog\nLearning Elixir Blog  \n\nLearn Elixir Blog\nLearn Elixir Blog  \n\n\n",tags:["read","elixir","phoenix","stickylink","resource","elm","webpack"],id:18});index.add({title:"RSS feeds for each Tags - Jekyll",category:null,content:'Jekyll is a very popular and very powerful static blog generator. Out of the box it\u2019s able to generate sophisticated site structures, and has a ton of configurability. One of the areas where I feel that Jekyll lacks some sophistication is around the handling of categories and tags; these are two data-sets that are core to Jekyll, but there isn\u2019t a lot of functionality actually built around them.\n\nAll the less,it is designed with for expansion into larger degrees of customization and sophistication and it has a powerful plugin model that are as easy as plug and play.\n\nPeople have different interests and I thought if they have feeds filtered by tags (or) categories,that would be a real help since the world today is flooded with unrelated articles.\n\nI hit a hurdle when I set out to do this, there is social plugin that is doing this.So, I got to build my own - and it turns out to be quite simple.\n\nTag page generation\n\nFirst, we will create a separate page for each tag assosciated with posts.Create a plugin \u2018tag_gen.rb\u2019 with the following code :\n\nlayout\n\nWe need a layout for the html that the tag page is gonna use :\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n# _layouts/default.html\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  {%  include head.html  %}\n  &lt;body&gt;\n    {%  include header.html  %}\n    &lt;div class="page-content"&gt;\n      &lt;div class="wrapper"&gt;\n        {{ content  }}\n      &lt;/div&gt;\n    &lt;/div&gt;\n    {%  include footer.html  %}\n    {%  include scripts.html  %}\n  &lt;/body&gt;\n&lt;/html&gt;\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n# _layouts/tag_index.html\n\n---\nlayout: default\n---\n\n&lt;div&gt;\n  &lt;center&gt;\n    &lt;a title="Subscribe to {{ page.tag | upcase  }}" href="/tag/{{ page.tag  }}/feed.xml"&gt;&lt;h2 style="background:#ad141e;border-radius: 20px;margin-bottom: 56px;color: white;" class="post_title"&gt;&lt;i class="fa fa-rss"  style="font-weight: 600;color: white;"&gt; {{ page.tag | upcase  }}&lt;/i&gt;&lt;/h2&gt;&lt;/a&gt;\n    &lt;ul&gt;\n      {%  for post in site.posts  %}\n      {%  for tag in post.tags  %}\n      {%  if tag == page.tag  %}\n        &lt;li style="padding-top: 1rem;" class=\'post-list\'&gt;\n          &lt;a style="font-size:2rem" class="title" href="{{ post.url  }}"&gt;{{ post.title  }}&lt;/a&gt;&lt;br&gt;\n          {{ post.date | date: "%b %-d, %Y"  }}&lt;br&gt;\n          {%  for tag in post.tags  %}\n            &lt;a class="tags" href="/tag/{{ tag  }}"&gt;{{ tag  }}&lt;/a&gt;\n          {%  endfor  %}\n        &lt;/li&gt;\n      {%  endif  %}\n      {%  endfor  %}\n      {%  endfor  %}\n    &lt;/ul&gt;\n  &lt;/center&gt;\n&lt;/div&gt;\n\nplugin\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n# _plugins/tag_gen.rb\n    \nmodule Jekyll\n\n  class TagIndex &lt; Page    \n    def initialize(site, base, dir, tag)\n      @site = site\n      @base = base\n      @dir = dir\n      @name = \'index.html\'\n\n      self.process(@name)\n      self.read_yaml(File.join(base, \'_layouts\'), \'tag_index.html\')\n      self.data[\'tag\'] = tag\n      self.data[\'title\'] = "Posts Tagged &amp;ldquo;"+tag+"&amp;rdquo;"\n    end\n  end\n\n  class TagGenerator &lt; Generator\n    safe true\n    \n    def generate(site)\n      if site.layouts.key? \'tag_index\'\n        dir = \'tag\'\n        site.tags.keys.each do |tag|\n          write_tag_index(site, File.join(dir, tag), tag)\n        end\n      end\n    end\n  \n    def write_tag_index(site, dir, tag)\n      index = TagIndex.new(site, site.source, dir, tag)\n      index.render(site.layouts, site.site_payload)\n      index.write(site.dest)\n      site.pages &lt;&lt; index\n    end\n  end\n\nend\n\nAfter this, you will have a proper page for each tag with all the posts corresponding to the tag in tag/[tag] folder.\n\nTag feed generation\n\nNext, we will create filtered feed for each tag.We will add another plugin \u2018rss_tag.rb\u2019 to plugins folder\n\nlayout\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n# _layouts/atom.html\n\n--- \nlayout: null \n---\n&lt;?xml version="1.0" encoding="utf-8"?&gt;\n    &lt;feed xmlns="http://www.w3.org/2005/Atom"&gt;\n        &lt;link href="{{ site.url  }}/tag/{{ page.tag  }}/feed.xml" rel="self" type="application/atom+xml" /&gt;\n        &lt;link href="{{ site.url  }}/" rel="alternate" type="text/html" /&gt;\n        &lt;updated&gt;{{ site.time | date_to_xmlschema  }}&lt;/updated&gt;\n        &lt;id&gt;{{ site.url  }}/&lt;/id&gt;\n        &lt;title&gt;Feed tagged &lt;b&gt;{{ page.tag | upcase  }}&lt;/b&gt; - {{ site.name  }}&lt;/title&gt;\n        &lt;subtitle&gt; {{ site.description  }} &lt;/subtitle&gt;\n        &lt;author&gt;\n            &lt;name&gt;{{ site.title | xml_escape  }}&lt;/name&gt;\n        &lt;/author&gt;\n        {%  for post in site.posts  %} {%  for tag in post.tags  %} {%  if tag == page.tag  %}\n        &lt;entry&gt;\n            &lt;title&gt;{{ post.title | xml_escape  }}&lt;/title&gt;\n            &lt;link href="{{ site.url  }}{{ post.url  }}/" /&gt;\n            &lt;published&gt;{{ post.date | date_to_xmlschema  }}&lt;/published&gt;\n            &lt;updated&gt;{{ post.date | date_to_xmlschema  }}&lt;/updated&gt;\n            &lt;id&gt;{{ site.url  }}{{ post.url  }}/&lt;/id&gt;\n            &lt;content type="html" xml:base="{{ site.url  }}{{ post.url  }}/"&gt;{{ post.content | xml_escape  }}&lt;/content&gt;\n        &lt;/entry&gt;\n        {%  endif  %} {%  endfor  %} {%  endfor  %}\n    &lt;/feed&gt;\n\nplugin\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n# _plugins/rss_tag.rb\n\nmodule Jekyll\n  class TagAtom &lt; Page\n    def initialize(site, base, dir, tag)\n      @site = site\n      @base = base\n      @dir = dir\n      @name = "feed.xml"\n\n      process(@name)\n      read_yaml(File.join(base, \'_layouts\'), \'atom.html\')\n      data[\'tag\'] = tag\n    end\n  end\n\n  class TagPageGenerator &lt; Generator\n    safe true\n\n    # Generate tag page and atom feed for each tag used in the blogs\n    def generate(site)\n      # if site.layouts.key? \'tagpage\'\n        site.tags.each_key do |tag|\n          site.pages &lt;&lt; TagAtom.new(site, site.source, File.join(\'tag\',tag), tag)\n        end\n      # end\n    end\n  end\nend\n\nAfter this, you will have a file named feed.xml in each tag folder that contains the feed corresponding to that tag.\n\nAll done, now you have feed for each tag and you can provide the feed to anyone who is interested in following particular tags from your blog.\n\nThis was a good excercise since I have not done any feature improvement to my blog other than style tweaks lately.\n\nYou can also look at my other jekyll posts by clicking on jekyll tag top of this page.You can see the feed button too ;)\n',tags:["blog","jekyll","rss"],id:19});index.add({title:"Landmark Algorithm for Graph Isomorphism",category:null,content:"L\u00e1szl\u00f3 Babai, of the University of Chicago, announced that he had come up with a new algorithm for the \u201cgraph isomorphism\u201d problem, one of the most tantalizing mysteries in computer science. The new algorithm appears to be vastly more efficient than the previous best algorithm, which had held the record for more than 30 years.\n\nLandmark Algorithm Breaks 30-Year Impasse  \n\n",tags:["read","algorithm","learning","graph"],id:20});index.add({title:"Getting started with GraphQL",category:null,content:"GraphQL makes it easy for fetching the data models for client side developers and easy for server side developers to maintain the endpoints which will also be drastically minimized because of graphQL\n\nOfficial Page - GraphQL  \n\nAwesome GraphQL Repositories  \n\nIf you prefer videos rather than reading through long posts.You can start here :\nGraphQL references  \n\n",tags:["read","graphql","learning","query","language","resource"],id:21});index.add({title:"Getting Started with Tensorflow",category:null,content:"Tensor Flow is  AI i.e., artificial intelligence library for numerical computations using data flow graphs.It is opensourced by google recently.\n\nOfficial Page  \n\nGithub Tensorflow Examples  \n\n",tags:["read","framework","tensorflow","learning","ai","data_science","artificial_intelligence"],id:22});index.add({title:"Onestop for Detailed Tutorials",category:null,content:"I always find myself wanting to learn a language or framework.Although they are many enriched blog posts and great docs,I do not know where to start it.\n\nI found this great website which will have a brief tutorials of several language by people who are either deeply involved in development of the language or by the creator of the language themself.\n\nHow I start a Language  \n\n",tags:["read","language","learning","framework"],id:23});index.add({title:"Embed Ejabberd in Phoenix App",category:null,content:"Embedding Ejabberd into phoenix application to have a realtime messaging feature in our App.\n\nEmbed Ejabberd in Phoenix App  \n\n",tags:["read","elixir","phoenix","ejabberd","webapp","learning"],id:24});index.add({title:"GraphQL introduction",category:null,content:"GraphQL is a data query language designed for product developers. This talk will discuss where it came from, why it\u2019s powerful, and how it as a horizontal platform fits into the open source ecosystem of software that Facebook is building.\n\n\n\n\n\n\n\nYou can also look for further references in this post :\n\nGraphQL references  \n\n\n",tags:["video","graphql","learning","language"],id:25});index.add({title:"MongoDB Playlist",category:null,content:"Some playlists to learn MongoDB from beginner level to advance deployment stages.\n\nThis will go through basics of MongoDB\n\n\n\n\n\n\n\n\n\nThis will give you insights from beginner to intermediate.\n\n\n\n\n\n\n\n\n\n  You can skip initial videos which are already covered in above playlist\n\n\n\n\nMongoDB disaster recovery\n\n\n\n\n\n\n\n\nSharding and Advance clustering setup of MongoDB\n\n\n\n\n\n\n\n",tags:["video","mongo","database","learning","playlist"],id:26});index.add({title:"Elementary Contracts",category:null,content:'This post contains exhaustive contracts that will be useful for elementary OS. You can use this on ubuntu also,but needs to change the exec command to open appropriate applications.\n\n\n\nOpen terminal in current directory\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Summon ShellGod Here\nIcon=terminal\nDescription=Open in terminal\nMimeType=inode;application/x-sh;application/x-executable;\nExec=pantheon-terminal -w %U\nGettext-Domain=pantheon-terminal\n\nOpen folder as Root\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Summon Root on Folder\nIcon=pantheon-files\nDescription=Open current folder as root privilege\nMimeType=inode;\nExec=gksudo pantheon-files %U\nGettext-Domain=pantheon-files\n\nOpen file as Root\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Summon Root on File\nIcon=scratch-text-editor\nDescription=open file as root with subl\nMimeType=text\nExec=gksudo subl %U\nGettext-Domain=subl\n\nMedia Info - Video\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Media info\nIcon=video\nDescription=media info\nMimeType=video\nExec=gnome-terminal --window-with-profile=new1 -e "mediainfo -i %f"\nGettext-Domain=pantheon-files \n\nMedia Info - Audio\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Media info\nIcon=video\nDescription=media info\nMimeType=audio\nExec=gnome-terminal --window-with-profile=new1 -e "mediainfo -i %f"\nGettext-Domain=pantheon-files  \n\nExtract Ogg from Webm\n\ninstall parallel prior to this\n\n1\n2\n3\n4\n5\n6\n7\n[Contractor Entry]\nName=Extract audio\nIcon=/usr/share/icons/hicolor/128x128/apps/multimedia-audio-player.svg\nDescription=Extract audio\nMimeType=video/webm\nExec=pantheon-terminal -e "parallel avconv -i \'{}\' -map 0:1 -c:a copy \'{}.ogg\' ::: %F"\nGettext-Domain=pantheon-files\n\n',tags:["blog","elementary","ubuntu","contract"],id:27});index.add({title:"Phoenix Framework Getting Started",category:null,content:"Phoenix in Action and some introduction videos\n\n\n\n\n\n",tags:["video","phoenix","elixir","language","framework"],id:28});index.add({title:"Elm Resources",category:null,content:"Some resources I read for learning Elm\n\nPragmatic Studio - Elm  \n\nAwesome-Elm  \n\nPlanet Elm Feed Aggregator  \n\nCodecentric Blog on Starting with Elm  \n\nElm Architecture Tutorial - Evancz  \n\nElm By Example  \n\nNo RedInk-Intro Elm to a JS WebApp  \n\nUniversity of Chicago course on Elm  \n\nPrezi -Structuring Interactive applications with Elm  \n\n",tags:["read","elm","learning","language","resource"],id:29});index.add({title:"Sticky links",category:null,content:"This post will have all interesting things that I would like to read and recommend other people.All the links are aggregated from various sources that I find and will be archived after some time.\n\nAlternative Erlang Syntax Language\n\nEfene-Alternate Erlang  \n\nTalk with Author  \n\nES6 Bullet Points\n\nES6 Quickread  \n\nBuilding for HTTP/2\n\nBuilding for HTTP/2  \n\n\n",tags:["read","es6","erlang","http2","note"],id:30});index.add({title:"Alchemy-Opensource AI",category:null,content:"Alchemy is opensource AI project from washington edu.You can read more about Alchemy here.\n\nAlchemy AI  \n\n",tags:["read","alchemy","ai","opensource"],id:31});index.add({title:"Javascript References",category:null,content:"All the popular javascript resources and when to use which.\n\nJavascript references and usecases  \n\n",tags:["read","javascript","reference","resource"],id:32});index.add({title:"Phoenix Resources",category:null,content:"Collection of All Resources for learning Phoenix.\n\nAwesome Elixir  \n\n30 Days of Elixir  \n\n\n  These are for Elixir which is phoenix based on and written in\n\n\nNothing Better than Official :smile:  \n\nBlog posts only on Phoenix  \n\nCultivate Blog with Elm frontend  \n\nHashNuke Blog  \n\nPhoenix Google Group  \n\n",tags:["read","phoenix","learning","resource"],id:33});index.add({title:"Phoenix with Elm - Alex Gardner",category:null,content:"In this video Alex Gardner explains how to integrate Phoenix with Elm both of which are ground breaking frameworks of this era with ambitious benchmarks that are to be set and doing a great.You can also go through detailed series by him on through here Phoenix with Elm\n\n\n\n\n\n",tags:["video","phoenix","elm","framework","language","elixir","erlang"],id:34});index.add({title:"Phoenix with Elm",category:null,content:"This post series explains how to mix and match Phoenix with Elm and make developing feel great.\n\nPhoenix With Elm  \n\n",tags:["read","phoenix","elm","series","language","learn","elixir"],id:35});index.add({title:"Using Phoenix with Mongo",category:null,content:"If you\u2019re brand new to Phoenix then I would suggest going through Phoenix.You can also read this book from Pragmatic Bookshelf.\n\nThat said,Phoenix added Mongo Ecto Adapter recently.I have not found any posts that are updated.This post is the most updated that I can found.\n\n\n  If anyone finds one that is updated,post the link in comment :smile:\n\n\nPhoenix With Mongo  \n\n",tags:["read","phoenix","mongo","language","tutorial","learn","elixir"],id:36});index.add({title:"Learning Elm-Playlist",category:null,content:"Some playlists I found for learning Elm language by building a game.It explains in a step by step manner from noob mode to gawd mode.It is a little out dated and uses a older version of Elm but it helps for a solid understanding\n\n\n\n\n",tags:["video","elm","playlist","learn","language"],id:37});index.add({title:"Editing Jekyll Posts With Prose",category:null,content:'Jekyll supports markdown posts.We will discuss an online Github Content Editor Prose that can be used to edit jekyll posts.It uses github authentication.Prose does not need to be specifically used for jekyll.You can edit any hosting site that has Git Hooks.\n\n\n\nIn this post,I will share\n\n\n  Explain prose configuration operations\n  Normal setup of prose for jekyll sites\n\n\nProse is a free online github content editor.It can be customised to our requirements such as\n\nImage Uploading\nWhen editing markdown documents you can drag and drop images onto the page which are uploaded to a media directory you specify in your configuration or the current directory.\n\nMobile Layout\nProse is designed as a mobile ready application and is particularly well suited for the iPad.\n\nMarkdown Features\nProse pays particular attention to Markdown files by providing a formatting toolbar and in page previewing.\n\nConfigurations\nOften you want to provide site maintainers access to create and edit content but not direct access to the source code that runs a project. Or you want a simple authoring environment that\u2019s focused on what matters to you. Configurations are a powerful way to customize what\u2019s provided during the day to day management of a site.\n\nFor non-jekyll sites, You can set up configurations by creating a _prose.yml file or add configurations as an entry to your Jekyll site in _config.yml.\n\nProse provides specific features to Jekyll sites\n\n\n  A Publish/Unpublish workflow.\n  Multilingual page translation support.\n  Drafts Management.\n  YAML Frontmatter Configuration.\n  Full site layout previewing.\n\n\nProse Config Options\n\nDescriptions with * are jekyll specific\n\nrooturl: \u201cDIRECTORY NAME\u201d\nAdding this option will restrict the prose access to the specific directory of the repo.\n\nignore: [\u2018file_a.html\u2019, \u2018_config.yml\u2019]\nThis option will ignore the files and do not show the files for edit.\n\nsiteurl: \u201chttp://domain-name.com\u201d\n* Set this to your site and it will show live previews rather than inhouse previews of prose.\n\nsite:\n* This field accepts a list of absolute .JSONP paths to content that is loaded during Jekyll live previews. This is particularly useful for building out tags or categories that should be present during preview.\n\nmedia: \u201cDIRECTORY NAME\u201d\nSpecify a media directory uploading images defaults to. When media is added to this directory, a listing of available assets is populated from the image dropdown link on markdown files.\n\nrelativeLinks: \u201cABSOLUTE-URL.JSONP\u201d\nDisplays a list of links to a user from the link dropdown on markdown files.\n\nmetadata:\n* This adds YAML frontmatter to jekyll posts automatically.\n\nMetadata Configuration\nEach jekyll post must contain frontmatter such as layout,date.Other options such as title,category,tags helps us organize site better.Prose helps us to add such front matter automatically when creating posts so you can concentrate on the content rather than structure.\n\nprose options can be added to it\u2019s own specific file _prose.yml or can be added to jekyll\u2019s _config.yml .\n\nmetadata should be of format :\n\n1\n2\n3\nmetadata:\n  _posts:\n    - # Elements ..\n\nFor each front matter you need in your post,you can add metadata element as name of the frontmatter key and a field object that describes what html element is used and how this should be displayed to the user.\n\nFor example,an entry like layout:blog in file can be configured as :\n\n1\n2\n3\n4\n- name: "layout"\n      field:\n          element: "hidden"\n          value: "blog"\n\nwhere\n\nname is exact match of frontmatter key\nfield is where values and display options are set.\nelement is the option type of the key type.\nvalue which contains the values.\n*options comes into picture for select and multiselect elements which we will see in a while.\n\nForm field attributes\n\nText\n\nelement: text\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\nvalue: (optional string) A default value\nplaceholder: (optional string) Helper text in the input if no value is provided.\n\ntype: text\n\nTextarea\n\nelement: textarea\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\nvalue: (optional string) A default value\nplaceholder: (optional string) Helper text in the textarea if no value is \nprovided.\n\nSelect &amp; Multiselect\n\nAllow a user to make one or more selections\n\nelement: select OR multiselect\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\noptions: (array or string) If the value is a string prose expects this to be a \nJSONP file that links to a json file structured in the following format: \n{\u201cname\u201d: \u201cGranny Apples\u201d, \u201cvalue\u201d: \u201cgranny-apples\u201d } if this is an array the formal should look like:\n\n1\n2\n3\noptions:\n  - name: \'Granny Apples\'\n    value: \'granny-apples\'\n\nplaceholder: (optional string) Helper text if no value is provided\nlang: (optional string) if a lang key is set this allows the option of filtering a JSONP response by language. Useful for multilingual sites in Jekyll\n(Multiselect only)\nalterable: (optional boolean) true or false whether a user can add additional values. Useful for tags.\nHidden\n\nThis is particularly useful for frontmatter fields that should always have a fixed value and not changed. An good example is the layout field a file inherits.\n\nHidden\n\nelement: hidden\nvalue: (optional string) The default value\n\nNumber\n\nelement: number\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\nvalue: (optional integer) A default integer\ntype: number\n\nButton\n\nA button can be used to toggle on and off the value\n\nelement: button\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\non: (string) The name of the on value\noff: (string) The name of the off value\n\nCheckbox\n\nToggles on a true or false state\n\nelement: checkbox\nlabel: (optional string) Label to the user\nhelp: (optional string) Help/description to accompany a label\nvalue: (boolean) true or false\n\nJekyll Prose Config\n\nConsider a jekyll sites contain a following directory structure of _posts.\n\n1\n2\n3\n_posts\n\t- blog\n\t- reads\n\nThen the prose configuration sample can be like this :\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n# Prose.io Config\nprose:\n  rooturl: "_posts"\n  siteurl: \'http://rrevanth.github.io/\'\n  relativeLinks: \'http://rrevanth.github.io/links.jsonp\'\n  media: \'assests/media\'\n  metadata:\n    _posts/blog:\n      - name: "published"\n        field:\n          element: "checkbox"\n          label: "Publish now"\n          help: "Keep this unchecked if you do not want to   publish the article right now"\n          value: "true"\n      - name: "layout"\n        field:\n          element: "hidden"\n          value: "post"\n      - name: "title"\n        field:\n          element: "text"\n          label: "Enter title of the Article"\n          placeholder: "Enter Title"\n      - name: "date"\n        field:\n          element: "text"\n          label: "Date"\n          value: "CURRENT_DATETIME"\n      - name: "author"\n        field:\n          element: "hidden"\n          value: "Revanth Revoori"\n      - name: "categories"\n        field:\n          element: "hidden"\n          value: "blog"\n          alterable: "true"\n      - name: "tags"\n        field:\n          element: "multiselect"\n          label: "Add Tags"\n          placeholder: "Add Tags"\n          options:\n            - name: "Blog"\n              value: "blog"\n          alterable: true\n      - name: "excerpt_separator"\n        field:\n          element: "text"\n          value: "&lt;!--more--&gt;"\n          \n\nWith this config,front matter can be automated for the blog sub-directory in _posts directory.In the same way,we can add other sub-directories to the options.\n\nI hope this series of posts helps you get started with jekyll blog Autodeployed to Github Pages with Travis CI and an online editor with Prose.\n',tags:["blog","prose","jekyll","automate"],id:38});index.add({title:"Automate Jekyll Blog to Github with Travis CI",category:null,content:'In addition to supporting regular HTML content, GitHub Pages supports Jekyll, a simple, blog-aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers some other advanced templating features.\n\n\n\nEvery GitHub Page runs through Jekyll when you push content to a specially named branch within your repository. For User Pages, use the master branch in your username.github.io repository. For Project Pages, use the gh-pages branch in your project\u2019s repository. Creating blog in Jekyll is awesome but it comes with a catch.Everytime we publish a post,we need to update the master branch with compiled website. Also, post editing is a horror if you are a person who likes to do it in editor.\n\nIn this post,we will go through\n\n\n  Deploying a jekyll blog to github with rake\n  Automate the build process with Travis CI\n  Github content editor Prose\n\n\nDeploying with Rake\n\nThis post assumes that your jekyll blog git repo contains two branches\n\n  source branch - contains the source files for blog.\n  master branch - contains the compiled blog.\n\n\nMake sure you are in source branch.Add a file named Rakefile to your root dir that contains the following code ..\n\nRakefile\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\nrequire \'rubygems\'\nrequire \'rake\'\nrequire \'rdoc\'\nrequire \'date\'\nrequire \'yaml\'\nrequire \'tmpdir\'\nrequire \'jekyll\'\n\ndesc "Generate blog files"\ntask :generate do\n  Jekyll::Site.new(Jekyll.configuration({\n    "source"      =&gt; ".",\n    "destination" =&gt; "_site"\n  })).process\nend\n\n\ndesc "Generate and publish blog to master"\ntask :publish =&gt; [:generate] do\n  Dir.mktmpdir do |tmp|\n    system "mv _site/* #{tmp}"\n    system "git checkout -B master"\n    system "rm -rf *"\n    system "mv #{tmp}/* ."\n    message = "Site updated at #{Time.now.utc}"\n    system "git add ."\n    system "git commit -am #{message.shellescape}"\n    system "git push origin master --force"\n    system "git checkout source"\n    system "echo published to master"\n  end\nend\n\ntask :default =&gt; :publish\n\nAfter adding this,you can build and deploy the updated source code to master just by running one command.Make sure you are in root dir of your git repo and run the following command :\n\n\n  rake\n\n\nThat\u2019s it.So simple,right.Not so fast.We just don\u2019t wanna run this command every time we create to post.We need something much better.\n\nEnter Travis,the saviour\n\nTravis SSH setup\n\nFor travis to have git repo permissions,you can do this two ways\n\n  Using Git access tokens (Less secure method)\n  Using SSH keys (More secure and recommended method)\n\n\nGenerate a private/public key pair without passphrase in the repo directory.Be sure to be in root dir,not any sub dir or other system dir.\n\n\n  ssh-keygen -t rsa -C \u201cdeploy@travis-ci.org\u201d -f deploy_key -N \u2018\u2019\n\n\nAdd the public key (deploy_key.pub) to the Git repo as a \u2018Deploy Key\u2019 through the web interface. We are using deploy keys so that we can make them specific to a single repository. You could use \u2018Personal access tokens\u2019 but they would then allow access to all repositories associated with the given account - this might be preferable in an organization context, using special GitHub accounts created specifically for Travis-CI to work with multiple repositories. The use of \u2018Personal access tokens\u2019 (and my starting point for this approach) is illustrated in Evan Sosenko\u2019s article Automatic publishing to GitHub Pages with Travis CI\n\nInstall the travis gem\n\n\n  gem install travis\n\n\nLogin to travis with your GitHub credentials\n\n\n  travis login\n\n\nEncrypt the SSH key to generate deploy_key.enc.\n\n\n  travis encrypt-file deploy_key\n\n\nThis should modify your .travis.yml file adding the openssh keys to before_install property like this\n\n\n  before_install:\nopenssl aes-256-cbc -K {blah blah blah}\n\n\n1\n2\n3\nAdd private deploy key files to .gitignore\ndeploy_key\ndeploy_key.pub\n\n\n  make sure you ignore the SSH keys and only commit the\n encrypted version. You may also want to back up the original\n key files elsewhere\n\n\nSetting Travis in the project\n\nAs you might know,Travis CI is used for testing and deploying automatically for git repositories.We are gonna use this feature to automatically build and deploy the site to master whenever we push any changes to source.\n\nAdding Travis integration is simple,add .travis.yml file to source root dir.\n\n.travis.yml\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nlanguage: ruby\nbranches:\n  only:\n  - source  # branch that contains source files\nrvm:\n- 2.2.3\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_{blah blah blah}\n- chmod u=rw,og= ~/.ssh/deploy_key\n- echo "Host github.com" &gt;&gt; ~/.ssh/config\n- echo "  IdentityFile ~/.ssh/deploy_key" &gt;&gt; ~/.ssh/config\n- git --version\n- git config user.name "{GIT_UNAME}"\n- git config user.email "{GIT_EMAIL}"\n- git remote set-url origin git@github.com:{GIT_UNAME}/{GIT_UNAME}.github.io.git\n- git remote -v\nscript:\n- bundle exec rake\nnotifications:\n  email:\n    recipients:\n      - {GIT_EMAIL}\n    on_success: change\n    on_failure: always\n    \n\nReplace {GIT_UNAME},{GIT_EMAIL} with their appropriate values.\n\nNow Signin to Travis CI and add your site repo for watching the repo to Automatically build.\n\n\n  In the project settings,Turn OFF Build pull requests and Build only if .travis.yml is present to ON.\n\n\nNow,whenever your push any changes to source branch,Travis should automatically build and deploy the site to master branch.\n\nPost Editing\n\nRecently,I found a great site for post editing,checkout out Prose.It has a awesome Markdown editor that accessess your repo and you can add posts,drafts to your source repo from there.\n\nLife gets so much simplified with all this awesome tools and experience is blissful.\n',tags:["blog","jekyll","rake","travis","deploy","automate"],id:39});index.add({title:"Comparing Node.js Frameworks: Express, Hapi, LoopBack, Sailsjs and Meteor",category:null,content:"I have found a great video explaining various framework pros and cons and which might be suitable for various product.This is opinianated anyway.So it is strictly a general comparison.\n\n\n\n\n",tags:["video","framework","nodejs"],id:40});index.add({title:"TED Talk about Sixth Sense",category:null,content:"I admire this guy very much and I was inspired by him in my college days.Great talk and cool idea.It would be awesome to use in real life\n\n\n\n\n",tags:["video","sixthsense","ted","talk"],id:41});index.add({title:"Facebook open sources Augmented Traffic Control",category:null,content:"Facebook developed a mind boggling tech that they opensourced on Github.Facebook today open-sourced Augmented Traffic Control (ATC), a Wi-Fi tool for testing how mobile phones and their apps handle networks of varying strength, over on GitHub. ATC simulates 2G, Edge, 3G, and LTE networks, and allows engineers to switch quickly between various simulated network connections.Read more at\n\nFacebook open sources Augmented Traffic Control, a Wi-Fi tool for simulating 2G, Edge, 3G, and LTE networks  \n\n",tags:["read","facebook","opensource","technology"],id:42});index.add({title:"My Experience with Unity",category:null,content:"This is the first time I have laid my hands on Unity.I got to admit that I never got my hands dirty in developing games although while working in my previous company i.e., HT Media,I have tried develop my basic skills using Cocos 2D in Lua,familiar neither in language nor the framework.That time I learner basics of lua from the Sample Project that comes with Cocos and created a box 2D game simulation which was not a pretty one but did have all the physics concepts and collision simulations done!\n\n\n\nNow coming to Unity,this is very easy to use compared to Cocos since the interface editor will give you enormous utilities that are very complex to apply in code for every object assosciation we need to do eliminating all the extra hardwork we need to do and just letting you concentrate on the game part.It also comes with sample project and various tutorials of real games using free assets.It got an asset store where developers bring up some awesome assets for your game.Although most of them are paid,the free one\u2019s are also very good for building small games and who knows you can even develop pretty good games with those too.\n\nI have followed the tutorial series of Space Shooter and developed the game from scratch.I have implemented mobile controls on top of it additional to the series.Although it is fundamental,the development of the entire game just took me two days and I can get the source in Android Studio Project for further development or any other platform and can build for deployment with a single click for various platforms.\n\n",tags:["blog","unity","game","study"],id:43});index.add({title:"SailsJS Pros & Cons",category:null,content:"I have been researching on developing a web app.I have gone through various sites for the technology stack to rely on.It seems using Python Django or Flask is good to go methods since they already have large userbase,documentation and well developed frameworks.\n\n\n\nAlthough if considering Nodejs or its derivatives for developing for not having to switch language from working on client-side and server-side.I looked in to Derby and Meteor.I stumbled across Sails.js,it seems promising for rapid development of application.I feel like keeping it short.For further deep delving in to the comparison,look at nathan\u2019s post on pros and cons of Sails.\n\n",tags:["blog","sailsjs","startup","study"],id:44});index.add({title:"Python Snippets",category:null,content:"Hi there,\nHere is a set of small scripts, which demonstrate some features of\nPython programming.\n\n1\n2\n3\n4\n5\n6\n7\n# this is a comment\n\n\n#! python\n\n# integer variables\nSPAM = 1       \n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#! python\n\nprint \"Hello, Python\"\n\n#! python\n# string variable\n\nSTRING = \"# This is not a comment.\"\n\nprint STRING\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n#! python\n\n# integer arith\n\na=4\nprint a\n\nb=12+5\nprint b\n\nc=b%a\nprint c\n\n\n#! python\n\n# trailing comma\n\ni = 256*256\nprint 'The value of i is', i\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n#! python\n\n# Fibonacci series:\n# the sum of two elements defines the next\na, b = 0, 1\nwhile b &lt; 200:\n       print b,\n       a, b = b, a+b\n\n\n#! python\n\n# input and operator if\n\nx = int(raw_input(\"Please enter an integer: \"))\n\nif x &lt; 0:\n      x = 0\n      print 'Negative changed to zero'\nelif x == 0:\n      print 'Zero'\nelif x == 1:\n      print 'Single'\nelse:\n      print 'More'\n\n\n#! python\n\n# operator for:\n\n# Measure some strings:\na = ['cat', 'window', 'defenestrate']\nfor x in a:\n    print x, len(x)\n\n\n\n#! python\n\n# range function\n\nprint range(10)\n\nprint range(5, 10)\n\nprint range(0, 10, 3)\n\n\na = ['Mary', 'had', 'a', 'little', 'lamb']\nfor i in range(len(a)):\n    print i, a[i]\n\n\n\n#! python\n\n# break operator\n# prime numbers\n\nfor n in range(2, 1000):\n    for x in range(2, n):\n        if n % x == 0:\n            print n, 'equals', x, '*', n/x\n            break\n    else:\n        # loop fell through without finding a factor\n        print n, 'is a prime number'\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n#! python\n\n\n#pass statement does nothing. \n#It can be used when a statement is required syntactically but the program requires no action. For example: \n\n\nwhile True:\n      pass # Busy-wait for keyboard interrupt\n\n\n\n#! python\n\n# Defining Functions\ndef fib(n):    # write Fibonacci series up to n\n    \"\"\"Print a Fibonacci series up to n.\"\"\"\n    a, b = 0, 1\n    while b &lt; n:\n        print b,\n        a, b = b, a+b\n \n# Now call the function we just defined:\nfib(2000)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n! python\n\n# function that returns a list of the numbers of the Fibonacci series\n\ndef fib2(n): # return Fibonacci series up to n\n    \"\"\"Return a list containing the Fibonacci series up to n.\"\"\"\n    result = []\n    a, b = 0, 1\n    while b &lt; n:\n        result.append(b)    # see below\n        a, b = b, a+b\n    return result\n\n#=================================== \nf100 = fib2(100)    # call it\nprint f100          # write the result\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n#! python\n# work with strings\n\n# Strings can be concatenated (glued together) with the + operator, and repeated with *: \n\n\nword = 'Help' + 'A'\nprint word\n\nprint '&lt;' + word*5 + '&gt;'\n\n# Two string literals next to each other are automatically concatenated; \n# the first line above could also have been written \"word = 'Help' 'A'\"; \n# this only works with two literals, not with arbitrary string expressions: \n\nst='str' 'ing'             #  &lt;-  This is ok\nprint st\nst='str'.strip() + 'ing'   #  &lt;-  This is ok\nprint st\n\n# Strings can be subscripted (indexed); like in C, the first character of a string \n# has subscript (index) 0. There is no separate character type; a character is \n# simply a string of size one. Like in Icon, substrings can be specified with \n# the slice notation: two indices separated by a colon. \n\nprint word[4]\n\nprint word[0:2]\n\nprint word[2:4]\n\n# Slice indices have useful defaults; an omitted first index defaults to zero, \n# an omitted second index defaults to the size of the string being sliced. \n\nprint word[:2]    # The first two characters\nprint word[2:]    # All but the first two characters\n\n# Python strings cannot be changed. Assigning to an indexed position in the string results in an error: \n# However, creating a new string with the combined content is easy and efficient: \n\nprint 'x' + word[1:]\n\nprint 'Splat' + word[4]\n\n# Here's a useful invariant of slice operations: s[:i] + s[i:] equals s. \n\nprint word[:2] + word[2:]\n\nprint word[:3] + word[3:]\n\n\n# Degenerate slice indices are handled gracefully: an index that is too large is replaced \n# by the string size, an upper bound smaller than the lower bound returns an empty string. \n\nprint word[1:100]\n\nprint word[10:]\n\nprint word[2:1]\n\n\n# Indices may be negative numbers, to start counting from the right. For example: \n\n\nprint word[-1]     # The last character\n\nprint word[-2]     # The last-but-one character\n\nprint word[-2:]    # The last two characters\n\nprint word[:-2]    # All but the last two characters\n\n\n# But note that -0 is really the same as 0, so it does not count from the right! \n\nprint word[-0]     # (since -0 equals 0)\n\n# Out-of-range negative slice indices are truncated, but don't try this for single-element (non-slice) indices: \n\nprint word[-100:]\n\n# print word[-10]    # error\n\n#The best way to remember how slices work is to think of the indices as pointing between characters, \n#with the left edge of the first character numbered 0. Then the right edge of the last character \n#of a string of n characters has index n, for example: \n\n# +---+---+---+---+---+ \n# | H | e | l | p | A |\n# +---+---+---+---+---+ \n# 0   1   2   3   4   5 \n#-5  -4  -3  -2  -1\n\n\ns = 'supercalifragilisticexpialidocious'\nprint s\nprint len(s)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n#! python\n\n# Default Argument Values\n\ndef ask_ok(prompt, retries=4, complaint='Yes or no, please!'):\n    while True:\n        ok = raw_input(prompt)\n        if ok in ('y', 'ye', 'yes'): return True\n        if ok in ('n', 'no', 'nop', 'nope'): return False\n        retries = retries - 1\n        if retries &lt; 0: raise IOError, 'refusenik user'\n        print complaint\n\n#============================================================== \n\ni = 5\n\ndef f(arg=i):\n    print arg\n\ni = 6\nf()\n#============================================================== \n\nz=ask_ok('really quit???')\n       \nif z==False :\n\tprint \"bad\"\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n#! python\n\n# Lambda Forms\n\ndef make_incrementor(n):\n    return lambda x: x + n\n    \n#==================================    \nf = make_incrementor(42)\n\nprint f(0)\nprint f(1)\nprint f(15)\n\n//===================================================================================\n//\n//===================================================================================\n#! python\n\n# speed test\nnn=10000000\ni=0;\ns=0;\n\nprint \"beginning...\"\n\nwhile i\n#! python\n\n# raw input of strings only!\n\nst = raw_input(\"\")\n\nprint st\n\nst=st*3  # triple the string\nprint st\n\n\n\n#! python\n\n# math\n\nimport math\n\nprint math.cos(math.pi / 4.0)\n\nprint math.log(1024, 2)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n#! python\n\n# random\n\nimport random\n\nprint random.choice(['apple', 'pear', 'banana'])\n\nprint random.sample(xrange(100), 10)   # sampling without replacement\n\nprint random.random()    # random float\n\nprint random.randrange(6)    # random integer chosen from range(6)\n\n\n#! python\n\ndef perm(l):\n        # Compute the list of all permutations of l\n    if len(l) &lt;= 1:\n                  return [l]\n    r = []  # here is new list with all permutations!\n    for i in range(len(l)):\n             s = l[:i] + l[i+1:]\n             p = perm(s)\n             for x in p:\n              r.append(l[i:i+1] + x)\n    return r\n\n#==============================================\na=[1,2,3]\n\nprint perm(a) \n\n\n#! python\n\na=2+3j\nb=2-3j\n\nprint a*a\nprint a*b\n\nprint a.real\nprint b.imag\n\n\n#! python\n\nwhile True:\n    try:\n        x = int(raw_input(\"Please enter a number: \"))\n        break\n    except ValueError:\n        print \"Oops! That was no valid number.  Try again...\"\n\n\n#! python\n\nimport string, sys\n\ntry:\n    f = open('myfile.txt')\n    s = f.readline()\n    i = int(string.strip(s))\nexcept IOError, (errno, strerror):\n    print \"I/O error(%s): %s\" % (errno, strerror)\nexcept ValueError:\n    print \"Could not convert data to an integer.\"\nexcept:\n    print \"Unexpected error:\", sys.exc_info()[0]\n    raise\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n#! python\n# work with lists\n\na = ['spam', 'eggs', 100, 1234]\nprint \" list a=\",a\n\n# list indices start at 0, \nprint 'a[0]=', a[0]\n\nprint 'a[3]=', a[3]\nprint 'a[-2]=', a[-2]\n\n# lists can be sliced, concatenated and so on: \nprint  \"a[1:-1]=\", a[1:-1]\n\nprint a[:2] + ['bacon', 2*2]\n\nprint 3*a[:3] + ['Boe!']\n\n# possible to change individual elements of a list: \n\na[2] = a[2] + 23\nprint \"changing a[2]=\", a\n\n#Assignment to slices is also possible, and this can even change the size of the list: \n\n# Replace some items:\na[0:2] = [1, 12]\nprint a\n\n# Remove some:\na[0:2] = []\nprint a\n\n# Insert some:\na[1:1] = ['bletch', 'xyzzy']\nprint a\n\na[:0] = a     # Insert (a copy of) itself at the beginning\nprint a\n\nprint \"length=\", len(a)\n\n# possible to nest lists (create lists containing other lists) \n\nq = [2, 3]\np = [1, q, 4]\nprint \" nest list=\", p\n\nprint 'length =', len(p)\n\nprint p[1]\n\nprint p[1][0]\n\np[1].append('xtra')  \nprint p\n\nprint q\n\n\n\n#! python\n\n# more work with lists\n\na = [66.6, 333, 333, 1, 1234.5]\n\nprint a.count(333), a.count(66.6), a.count('x')\n\na.insert(2, -1)\nprint a\n\na.append(333)\nprint a\n\nprint a.index(333)\n\na.remove(333)\nprint a\n\na.reverse()\nprint a\n\na.sort()\nprint a\n\n\n\n#! python\n\n# huge list making\n\nnn=1000000\na = []\ni=0\n\nwhile i\n#! python\n\n# Using Lists as Stacks\n\nstack = [3, 4, 5]\nstack.append(6)\nstack.append(7)\nprint stack\n\nx=stack.pop()\nprint \"popped \",x\nprint stack\n\nx=stack.pop()\nprint \"popped \",x\nx=stack.pop()\nprint \"popped \",x\nprint stack\n\n\n#! python\n\n# Using Lists as Queues\n\nqueue = [\"Eric\", \"John\", \"Michael\"]\nqueue.append(\"Terry\")           # Terry arrives\nqueue.append(\"Graham\")          # Graham arrives\nprint queue\n\ns=queue.pop(0)\nprint s\n\ns=queue.pop(0)\nprint s\n\nprint queue\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n#! python\n\n# The del statement\n\na = [-1, 1, 66.6, 333, 333, 1234.5]\ndel a[0]\nprint a\n\ndel a[2:4]\nprint a\n\n\n\n#! python\n\n# filter of sequence\n\ndef f(x): return x % 2 != 0 and x % 3 != 0\n\nres=filter(f, range(2, 25))\n\nprint res\n\n\n#! python\n\n# map of sequence\n\ndef cube(x): return x*x*x\n\nres=map(cube, range(1, 11))\n\nprint res\n\n\n#! python\n\n# reduce(func, sequence)\" returns a single value constructed by\n# calling the binary function func on the first two items of the sequence, \n# then on the result and the next item, and so on\n\ndef add(x,y): return x+y\n\nr=reduce(add, range(1, 11))\nprint r # 55\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n#! python\n\n# A tuple consists of a number of values separated by commas\n\nt = 12345, 54321, 'hello!' # tuple packing\nprint t[0]\n\nprint t\n(12345, 54321, 'hello!')\n\n# Tuples may be nested:\nu = t, (1, 2, 3, 4, 5)\nprint u     #  ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n#! python\n\n# Dictionaries are sometimes as ``associative memories'' or ``associative arrays''\n\ntel = {'jack': 4098, 'sape': 4139}\ntel['guido'] = 4127\nprint tel\n\nprint tel['jack']\n\ndel tel['sape']\ntel['irv'] = 4127\nprint tel\n\nprint tel.keys()\n\nx=tel.has_key('guido')\nprint x\n\n# The dict() constructor builds dictionaries directly from lists \n# of key-value pairs stored as tuples. When the pairs form a pattern, \n# list comprehensions can compactly specify the key-value list. \n\nd=dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\nprint d\n\nvec=[1,2,3,4,5]\ndd=dict([(x, x**2) for x in vec])     # use a list comprehension\nprint dd\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n#! python\n\n# Standard Module sys\n\nimport sys\n\nprint sys.path\n\nsys.path.append('c:\\temp')\nprint sys.path\n\nprint sys.version\nprint sys.platform\n\nprint sys.maxint\n\n\n\n#! python\n#=======================================================\n# dir() is used to find out which names a module defines\n\nimport sys\n\nprint dir(sys)\n\n# Without arguments, dir() lists the names you have defined currently\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n#! python\n\n#  convert any value to a string: pass it to the repr() or str()\n\ns = 'Hello, world.'\nprint str(s)\n\nprint repr(s)\n\nprint str(0.1)\n\nprint repr(0.1)\n\nx = 10 * 3.25\ny = 200 * 200\ns = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\nprint s\n\n# The repr() of a string adds string quotes and backslashes:\nhello = 'hello, world\\n'\nhellos = repr(hello)\nprint hellos   # 'hello, world\\n'\n\n# The argument to repr() may be any Python object:\nprint repr((x, y, ('spam', 'eggs')))\n\n# reverse quotes are convenient in interactive sessions:\nprint `x, y, ('spam', 'eggs')`\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#! python\n\n#  two ways to write a table of squares and cubes:\n\n\nfor x in range(1, 11):\n    print repr(x).rjust(2), repr(x*x).rjust(3),\n    # Note trailing comma on previous line\n    print repr(x*x*x).rjust(4)\n\n    \nprint '================================================='     \nfor x in range(1,11):\n    print '%2d %3d %4d' % (x, x*x, x*x*x)\n\n1\n2\n3\n4\n5\n6\n7\n#! python\n\n# output results from running \"python demo.py one two three\"\n# at the command line: \n\nimport sys\nprint sys.argv[]  #  ['demo.py', 'one', 'two', 'three']\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n#! python\n\n# String Pattern Matching - regular expression\n\nimport re\n\nr=re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\nprint r # ['foot', 'fell', 'fastest']\n\ns=re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\nprint s # 'cat in the hat'\n\n\n\n\n#! python\n\n# dates are easily constructed and formatted\n\nfrom datetime import date\n\nnow = date.today()\nprint now\n\ndatetime.date(2003, 12, 2)\n\nprint now.strftime(\"%m-%d-%y or %d%b %Y is a %A on the %d day of %B\")\n\n\n# dates support calendar arithmetic\n\nbirthday = date(1964, 7, 31)\nage = now - birthday\nprint age.days # 14368\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n#! python\n\n# Internet Access\n\nimport urllib2\n\nfor line in urllib2.urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):\n\tif 'EST' in line:      # look for Eastern Standard Time\n\t    print line\n\nimport smtplib\n\nserver = smtplib.SMTP('localhost')\nserver.sendmail('soothsayer@tmp.org', 'jceasar@tmp.org',\n\"\"\"To: jceasar@tmp.org\nFrom: soothsayer@tmp.org\n\nBeware the Ides of March.\n\"\"\")\nserver.quit()\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n# work with files\n\n#open file for write\n\nf=open('c:/TEMP/workpy.txt','w')\n\nprint f\n\nf.write(\"aaaaaaaaaaaaaaaaaaa\\n\")\nf.write(\"bbbbbbbbbbbbbb\");\n\n\n\n# work with files\n\n#open file for read\n\nf=open('c:/TEMP/workpy.txt','r')\n\n# line reading\n\ns=f.readline()\nprint s\n\nf.close()\n\n\n\n# work with files\n\n#open file for read\n\nf=open('c:/TEMP/workpy.txt','r')\n\n# pieces reading\n\ns1=f.read(5)\nprint s1\n\ns2=f.read(19)\nprint s2\n\ns2=f.read(25)\nprint s2\n\nf.close()\n\n\n\n# work with files\n\n#open file for read\n\nf=open('c:/TEMP/workpy.txt','r')\n\n# pieces reading\n\ns1=f.read(5)\nprint s1\nprint f.tell()\n\ns2=f.read(19)\nprint s2\nprint f.tell()\n\ns2=f.read(25)\nprint s2\nprint f.tell()\n\nf.close()\n\n\n# work with files\n\n# seek\n\nf=open('c:/TEMP/workpy.txt','r+')\n\nf.write('0123456789abcdef')\nf.seek(5)     # Go to the 6th byte in the file\nprint f.read(1)        \n\nf.seek(-3, 2) # Go to the 3rd byte before the end\nprint f.read(1)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#! python\n\n# The glob module provides a function for making file lists from\n# directory wildcard searches: \n\nimport glob\n\ns=glob.glob('*.*')\nprint s  #  ['primes.py', 'random.py', 'quote.py']\n\n",tags:["blog","code","python","snippet"],id:45});index.add({title:"Bash Snippets",category:null,content:'Set of small scripts, which demonstrate some features of bash programming.\n\n1\n2\n3\n4\n5\n6\n7\n8\n//===================================================================================\n// set new prompt\n//===================================================================================\n\nPS1="&gt;"\nPS1="[${LOGNAME}@$(hostname)] # "\nPS1="[${LOGNAME}] # "\nPS1=\'$PWD $ \'\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n//===================================================================================\n// set (and automatically create) shell variable\n//===================================================================================\n\n$ test="test"\n\n$ homedir=\'pwd\'\n\nstring="The man said \\" hello \\"."\n\n1\n2\n3\n4\n5\n//===================================================================================\n// To use the variable within the shell, it is preceded by a $\n//===================================================================================\nhomedir=$HOME\ncd $homedir\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n//===================================================================================\n// how to print shell variable\n//===================================================================================\n\necho PS1\n\necho $PS1\n\necho $USERNAME\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n//===================================================================================\n// predefined shell variables\n//===================================================================================\nHOME    name of users login directory\nIFS     internal field separators\nPATH    search path used for finding commands\nPS1     shell prompt\nOSTYPE\nUSERNAME\nSHELL \n\n1\n2\n3\n4\n5\n6\n7\n//===================================================================================\n// The shell supports pattern matching\n//===================================================================================\n* Match all characters in a string \n? Match a single character\n\nls *.dat\n\n1\n2\n3\n4\n//===================================================================================\n// Command Substitution\n//===================================================================================\ntoday=`date`\n\n1\n2\n3\n4\n5\n//===================================================================================\n#---------------------------------------------------\n# empty sh script program\n#---------------------------------------------------\n#!/bin/sh\n\n1\n2\n3\n4\n5\n#---------------------------------------------------\n# comments\n#---------------------------------------------------\n#!/bin/sh\n# this is comment\n\n1\n2\n3\n4\n5\n6\n7\n#---------------------------------------------------\n# printing of string constant\n#---------------------------------------------------\n#!/bin/sh\necho \'hello\'\necho "hello"\necho hello\n\n1\n2\n3\n4\n5\n6\n7\n8\n#---------------------------------------------------\n# declaration and printing of string variable\n#---------------------------------------------------\n#!/bin/sh\n\nx=\'Wonderful new World\'\necho $x\necho x # just string \'x\'\n\n1\n2\n3\n4\n5\n#---------------------------------------------------\n# call of other programs\n#---------------------------------------------------\n#!/bin/sh\nls\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# indirect call of other programs\n#---------------------------------------------------\n#!/bin/sh\n\nx=\'pwd\'\n$x\n\nx=\'ls -l\'\n$x\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# indirect call with indirect parameters\n#---------------------------------------------------\n#!/bin/sh\nu=\'-l\'\n\nx=\'ls \'\n\n$x $u\n\n1\n2\n3\n4\n5\n6\n#---------------------------------------------------\n# print current shell name ???\n#---------------------------------------------------\n#!/bin/sh\n\necho $SHELL\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# Anything enclosed in double quotes is passed on exactly \n# as presented with the exception that the values of \n# shell variables are substituted\n#---------------------------------------------------\n#!/bin/sh\n\nv1="abc "\nv2="$v1 d"\necho $v1 $v2\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# Any matter enclosed in single quotes is passed on \n# exactly as presented. The values of shell variables \n# are not substituted. \n#---------------------------------------------------\n#!/bin/sh\n\nv1="abc"\nv2=\'$v1 d\'\necho $v1 $v2\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# Back quotes are used to enclose commands. An item\n# enclosed in back quotes is replaced by the standard\n# output of the command. Shell variable values\n# are substituted within back quotes.\n#---------------------------------------------------\n#!/bin/sh\n\ndate=`date`\necho the date is $date\n\n1\n2\n3\n4\n5\n6\n7\n8\n#---------------------------------------------------\n# escaping\n#---------------------------------------------------\n#!/bin/sh\n\nmsg=`echo Your Current Directory is \\`pwd\\``\n\necho $msg\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# reading of text line from keyboard\n#---------------------------------------------------\n#!/bin/sh\n\nread x\n\necho $x\necho $x\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# reading of text line from keyboard with help comment\n# echo without new line at the end\n#---------------------------------------------------\n#!/bin/sh\n\necho -n "Input text line=? "\nread x\n\necho $x\necho $x\n\n1\n2\n3\n4\n5\n6\n7\n8\n#---------------------------------------------------\n# syntax:  many commands in one line !!!!\n#---------------------------------------------------\n#!/bin/sh\n\necho "a"; echo "b"; echo "c"\n\nvar=5; echo `expr $var + $var` \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# integer variable and its increment\n# does not works in sh !!!\n#---------------------------------------------------\n#!/bin/bash\n\nvar=12345\nlet var=$var+1 # let is important\necho $var\n\nv=12345\nv=$v+1 # result "12345+1"\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# integer arithmetics - bash only !\n#---------------------------------------------------\n#!/bin/bash\n\necho \'number=?\' ; read x\n\nlet y=$x+$x ; echo \'x+x=\' $y\n\nlet y=$x*$x ; echo \'square=\' $y\n\nlet y=$x/3 ; echo \'x/3=\' $y\n\nlet y=$x%7 ; echo \'x%7=\' $y\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n#---------------------------------------------------\n# integer arithmetics in sh !!! using expr - slow\n#---------------------------------------------------\n#!/bin/sh\n\na=123\nb=12\n\nc=`expr $a + $b` # addition\necho $c\n\nc=`expr $a \\* $b` # multiplication\necho $c\n\nc=`expr $a / $b` # division\necho $c\n\nc=`expr $a % $b` # residual\necho $c\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# very simple \'if\' \n#---------------------------------------------------\n#!/bin/sh\n\necho \'number=?\'\nread x\n\nif [ $x -eq 5 ]\nthen\n  echo "five"\nfi  \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# if ... else\n#---------------------------------------------------\n#!/bin/sh\n\necho \'number=?\'\nread x\n\nif [ $x -eq 5 ]\nthen\n  echo "five"\nelse\n  echo "not 5"  \nfi  \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n#---------------------------------------------------\n# if ... elif ... else\n#---------------------------------------------------\n#!/bin/sh\n\necho \'number=?\'\nread x\n\nif [ $x -eq 5 ]\nthen\n  echo "five"\nelif [ $x -eq 7 ]\nthen\n  echo "seven"  \nelse\n  echo "not 5 and not 7"  \nfi  \n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n#---------------------------------------------------\n# comparison -lt  and  -gt, nested if\n#---------------------------------------------------\n#!/bin/sh\n\necho -n \'number=?\'\nread x\n\nif [ $x -gt 0 ]\nthen\n  if [ $x -lt 10 ]\n  then\n    echo "0 &lt; x &lt; 10"\n  fi\nfi\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# while loop - print first 10 integers from 0\n#---------------------------------------------------\n#!/bin/bash\n\nx=0\n\nwhile  [ $x -lt 10 ]\ndo\n  echo $x\n  let x=$x+1\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# 10 random numbers generation\n#---------------------------------------------------\n#!/bin/bash\n\ni=0\nwhile [ $i -lt 10 ]\ndo\n  x=$RANDOM\n  echo $x\n  let i=$i+1\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# endless loop: interrupting by ctrl-c\n#---------------------------------------------------\n#!/bin/sh\n\nwhile [ 1 ]\ndo\n  read x\n  echo $x$x\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n#---------------------------------------------------\n# divisors of integer number\n#---------------------------------------------------\n#!/bin/bash\n\necho -n \'number=?\'\nread x\n\ni=2 # possible divisor\nk=1\nlet n=$x/2 # top limit for divisor\n\nwhile [ $i -le $n ]\ndo\n  let k=$x%$i # residual\n  if [ $k -eq 0 ]\n  then\n    echo -n "Divisor= "\n    echo $i\n  if\n  let i=$i+1\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# simple use of  for ... in ...\n#---------------------------------------------------\n#!/bin/sh\n\nfor i in "abc" "xyz" 1 2 99\ndo\n  echo $i\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n#---------------------------------------------------\n# use for as in C-programming\n# sum of the first n integer numbers\n#---------------------------------------------------\n#!/bin/bash\n\necho -n "number=?"\nread n\n\ns=0 # here sum\n\nfor((i=1; i &lt;=n ; i++))\ndo\n  let s=$s+$i \ndone\n\necho "sum= "$s\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n#---------------------------------------------------\n# operator case for selection of logical branches\n# end marker ;; of branch\n#---------------------------------------------------\n#!/bin/sh\n\necho "input string=?"\nread str\n\ncase "$str" in\n  abc) echo "string = abc" \n    ;;\n  xyz) echo "string = xyz" \n    ;;\n  *)   echo "not abc, not zyz" ;;\nesac\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n#---------------------------------------------------\n# exit operator\n#---------------------------------------------------\n#!/bin/sh\n\nwhile [ 1 ]\ndo\n  read x\n  echo $x\n  if [ $x -eq 0 ] # in $x must be number!\n  then\n    echo "script done ..."\n    exit 0\n  fi\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# string comparing\n#---------------------------------------------------\n#!/bin/sh\n\necho "Input string=?"\nread str\n\nif [ $str = "abc" ]\nthen\n  echo "You got it!"\nelse\n  echo "Its not \'abc\'"\nfi\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n#---------------------------------------------------\n# simple strings concatenation\n#---------------------------------------------------\n#!/bin/sh\n\necho "Input string=?"\nread str\n\ns2=$str"AAAA"\necho $s2\n\ns3="XXX"$s2\necho $s3\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n#---------------------------------------------------\n# strings concatenation\n#---------------------------------------------------\n#!/bin/sh\n\necho "Input string=?"\nread str1\n\necho "Input second string=?"\nread str2\n\ns3=$str1$str2 # it works!\necho $s3\n\ns4=${str1}${str2} # it works too!\necho $s4\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# testing whether a string is null\n#---------------------------------------------------\n#!/bin/sh\n\necho "Input string=?"\nread str\n\nif [ $str ]\nthen\n  echo "Not empty"\nelse\n  echo "Empty"\nfi\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# length of string\n#---------------------------------------------------\n#!/bin/sh\n\necho "Input string=?"\nread str\n\nleng=`expr length $str`\necho "length= "$leng\n\n1\n2\n3\n4\n5\n6\n7\n8\n#---------------------------------------------------\n# how to insert string to constant string\n#---------------------------------------------------\n#!/bin/sh\n\nvar="good"\n\necho "This is $var test"\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n#---------------------------------------------------\n# simplest function example\n#---------------------------------------------------\n#!/bin/sh\n\n#---------------------------\nfunc()\n{\n  echo "Inside function"\n}\n\n#---------------------------\necho "Now function call..."\nfunc\necho "end of main"\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# function can see variables of main program\n#---------------------------------------------------\n#!/bin/sh\n\n#--------------------------\nfunc()\n{\n  echo $var\n}\n#--------------------------\n\nvar="test of global "\nfunc\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n#---------------------------------------------------\n# pass of parameters to function\n#---------------------------------------------------\n#!/bin/sh\n\n#---------------------------------\nfunc()\n{\n  echo "We are in function now"\n  echo $0  # shell script name\n  echo $1  # first parameter\n  echo $2  # second parameter\n  echo "We leave function..."\n  exit 0\n}\n\n#---------------------------------\n\nfunc  123  "abc"\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# passing variable parameters\n#---------------------------------------------------\n#!/bin/bash\n\n#-------------------------------\nfunc2()\n{\n  let r=$1*$1\n  echo $r\n}\n#-------------------------------\nvar=123\nfunc2 $var\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n#---------------------------------------------------\n# recursive function example\n# calculation of factorial\n#---------------------------------------------------\n#!/bin/sh\n#-------------------------------\nfactorial()\n{\n  if [ "$1" -gt "1" ]\n  then\n    i=`expr $1 - 1`\n    j=`factorial $i`\n    k=`expr $1 \\* $j`\n    echo $k\n  else\n    echo 1\n  fi\n}\n#-------------------------------\nread x\nfactorial $x\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n#---------------------------------------------------\n# using of function library ????????\n#---------------------------------------------------\n\nfile with name my.lb\n\nfunc2()\n{\n  echo $1$1\n}\nfunc3()\n{\n  echo $1$1$1\n}\n\nshell program:\n\n#!/bin/sh\n\n./my.lb\n\nvar=123\n\nfunc2 123\n\nfunc3 123\n\n1\n2\n3\n4\n5\n6\n#---------------------------------------------------\n# floating point numbers\n#---------------------------------------------------\n#!/bin/sh\n\n# does not support !!!!\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# simpiest array : declaration, element access and assignment\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd)\n\necho ${arr[0]} # curly bracket notation\necho ${arr[1]}\necho ${arr[2]}\necho ${arr[3]}\n\narr[2]="CCCCCCC"\necho ${arr[2]}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# number of elements in array\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd)\n\nn=${#arr[@]}\necho $n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# array with filenames of current directory\n#---------------------------------------------------\n#!/bin/sh\n\narr=(*)  # * is list of all file and dir names\n\nn=${#arr[@]}\necho "number of files and dirs "$n\n\necho ${arr[0]}\necho ${arr[1]}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# print all array elements -not good\n# works then no holes in indexes\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd ee ff gg)\nn=${#arr[@]}\ni=0\nwhile test $i -lt $n\ndo\n  echo ${arr[$i]}\n  let i=$i+1\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n#---------------------------------------------------\n# dynamic expansion of array\n# one array element in reality is couple (index, value)\n#---------------------------------------------------\n#!/bin/bash\n\narr=()\n\nn=${#arr[@]}\necho "number of array elements "$n\n\narr[0]=a\nn=${#arr[@]}\necho "number of array elements "$n\n\narr[1]=b\nn=${#arr[@]}\necho "number of array elements "$n\n\narr[2]=c\nn=${#arr[@]}\necho "number of array elements "$n\n\narr[10]=h\nn=${#arr[@]}\necho "number of array elements "$n\n\n\necho ${arr[10]}\n\necho ${arr[4]} # empty string\necho ${arr[6]} # empty string\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n#---------------------------------------------------\n# get all array and print it\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd ee ff gg)\n\necho ${arr[*]} # all array\n\necho ${arr[@]:0}   # aa bb cc dd ee ff gg\n\necho ${arr[@]:1}   # bb cc dd ee ff gg\n\necho ${arr[@]:2:3} # cc dd ee\n\nfor i in ${arr[*]}\ndo\n  echo $i\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n#---------------------------------------------------\n# adding element to array\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd ee ff gg)\n\necho ${arr[*]}\n\narr=( "${arr[@]}" "newElem" ) # from right\n\necho ${arr[*]}\n\narr=( "newElem" "${arr[@]}" ) # from left\n\necho ${arr[*]}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# move last element from array\n#---------------------------------------------------\n#!/bin/bash\n\n\narr=(aa bb cc dd ee ff gg)\n\necho ${arr[*]}\n\nunset arr[${#arr[@]}-1] #  move last element\necho ${arr[*]}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n#---------------------------------------------------\n# copying of array\n#---------------------------------------------------\n#!/bin/bash\n\narr=(aa bb cc dd ee ff gg)\n\necho ${arr[*]}\n\narr2=( "${arr[@]}" )\n\necho ${arr2[*]}\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# get substring from string\n#---------------------------------------------------\n#!/bin/bash\n\necho "long string input=?"\nread st\n\nst2=${st:2:4}\n\necho $st2\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# substring replacement "abc" to "xyz"\n#---------------------------------------------------\n#!/bin/bash\n\necho "string input=?"\nread str\n\nst2=${str/abc/xyz} # only ones\n\necho $st2\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# search of character \'a\' in a string\n#---------------------------------------------------\n#!/bin/sh\n\necho "string input=?"\nread str\n\npos=`expr index $str a`\n\necho "position of the first \'a\' = "$pos\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# string list counting\n#---------------------------------------------------\n#!/bin/sh\n\nfor i in aa bb cc dd ee ff gg hh\ndo\n  echo $i\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# command line arguments\n# separated by spaces\n#---------------------------------------------------\n#!/bin/sh\n\necho $0  # script file name\n\necho $1  # first argument\necho $2  # second argument\necho $3  # third argument\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n#---------------------------------------------------\n# command line arguments without script name number\n# all command line without script name\n#---------------------------------------------------\n#!/bin/sh\n\necho $#  # argument number\n\necho $*  # command line\n\necho $@\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n#---------------------------------------------------\n# get all files and dir names\n#---------------------------------------------------\n#!/bin/sh\n\necho *  # file and dir names of current dir\n\nfor i in *\ndo\n  echo $i\ndone\n\necho ../* # file and dir names of parent dir\n\n*/ just close comments\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n#---------------------------------------------------\n# file search from root dir      ???????\n# file name - parameter from command line\n#---------------------------------------------------\n#!/bin/sh\n\nstart=$HOME\ndate\nfind $start -name $1 -print\n\n1\n2\n3\n4\n5\n6\n#---------------------------------------------------\n# list of all files with extension .txt     !!!!!!\n#---------------------------------------------------\n#!/bin/sh\n\necho *.txt\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n#---------------------------------------------------\n# combine a set of text files in one file use\n# script &gt;targetfile.lst , not txt-file !!!\n#---------------------------------------------------\n#!/bin/sh\n\nlst=*.txt\n\nfor i in $lst\ndo\n  echo\n  echo "======================================"\n  echo "File "$i\n  echo "======================================"\n  cat &lt;$i\ndone\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n#---------------------------------------------------\n# create new file and write string to it\n# file name from command string - variable $1\n#---------------------------------------------------\n#!/bin/sh\n\necho "String=?"\nread str\n\necho $str &gt;$1\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# read textlines from console and add them to file\n# file name from command string - variable $1\n#---------------------------------------------------\n#!/bin/sh\n\necho "Add strings=?"\nstr="1"\n\nwhile [ $str ]\ndo\n  read str\n  echo $str &gt;&gt;$1\ndone\n\n1\n2\n3\n4\n5\n6\n7\n#---------------------------------------------------\n# read first string from text file\n#---------------------------------------------------\n#!/bin/sh\n\nread str &lt;$1\necho $str\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n#---------------------------------------------------\n# text file reading\n# script res.txt\n#---------------------------------------------------\n#!/bin/sh\n\nstr="1"\n\nwhile [ $str ]\ndo\n  read str\n  echo $str\n  echo $str\ndone\n\n',tags:["blog","code","bash","snippet"],id:46});index.add({title:"Sql join queries - Interview questions",category:null,content:"COMPLEX JOINS : SQL SERVER JOINS QUERIES INTERVIEW QUESTIONS AND ANSWERS EXAMPLES FOR EXPERIENCED SET-7  \n\n",tags:["read","sql","interview"],id:47});index.add({title:"Tags in Jekyll by Charlie Park",category:null,content:"Tags In Jekyll  \n\n",tags:["read","jekyll","code"],id:48});index.add({title:"SQL Queries - Reference",category:null,content:"SQL Tutorial Home  \n\n",tags:["read","sql","interview"],id:49});index.add({title:"Using Jekyll Plugins on Github Pages",category:null,content:"Using Jekyll Plugins on Github Pages  \n\n",tags:["read","jekyll","github"],id:50});index.add({title:"Java Interview Questions",category:null,content:"Java Programming Interview Questions  \n\n",tags:["read","java","interview"],id:51});var store=[{title:"Machine Learning Beginner to Advance",link:"/reads/2017/01/machine-learning-beginner-to-advance",date:"January 14, 2017",category:null,tags:["read","ml","svm","series","resources"],excerpt:"I will be sharing every post that I read small to big here which deemed interesting and helps me grasp..."},{title:"Bugbounty resources",link:"/reads/2016/09/bugbounty-resources",date:"September 2, 2016",category:null,tags:["read","bug_bounty","resources","learning"],excerpt:"Here,I am gonna list all the resources i\u2019m gonna find on bug bounty that would be helpful Bug Bounty resources..."},{title:"Learners Digest",link:"/reads/2016/07/learners-digest",date:"July 31, 2016",category:null,tags:["read","python","rails","ruby","reference","language"],excerpt:"RubyonRails best getting started  \n\nPython for DataScience (SciPy Lecture Notes)  \n\n\n"},{title:"Some More Sticky Links",link:"/reads/2016/06/some-more-sticky-links",date:"June 14, 2016",category:null,tags:["read","leaf","machine_learning","ml","data_science","sticky_link","link"],excerpt:"This is collection of articles one must read to be a better programmer Modest list of programming blogs Machine learning..."},{title:"Hacker News Bits",link:"/reads/2016/04/hacker-news-bits",date:"April 12, 2016",category:null,tags:["read","deep_learning","language","f#","lua","resource","hacker_news","machine_learning","python","keras"],excerpt:"Hackernews bookmarks - 12th April 2016 : Keras: Deep Learning library for Theano and TensorFlow Keras: Deep Learning library for..."},{title:"References - C++",link:"/reads/2016/04/references-c",date:"April 12, 2016",category:null,tags:["read","C++","reference","algorithm","language"],excerpt:"Some reads and references for C++ : Bloom Filters in C++ How to write a Bloom filter in C++ JIT..."},{title:"ML-Stciky Links",link:"/reads/2016/03/ml-theory",date:"March 23, 2016",category:null,tags:["read","machine_learning","ml","series"],excerpt:"ML references Machine Learning in theory : Machine Learning: An In-Depth, Non-Technical Guide Machine Learning - Berkeley Blog A Guide..."},{title:"Interface Architecture comparison",link:"/reads/2016/03/interface-architecture-comparison",date:"March 22, 2016",category:null,tags:["read","architecture","interface","elm","cyclejs","react"],excerpt:"This post differentiates different interface languages and their architectures :\n\nUNIDIRECTIONAL USER INTERFACE ARCHITECTURES\n  \n  \n"},{title:"Place to programs",link:"/reads/2016/03/place-to-programs",date:"March 1, 2016",category:null,tags:["read","language","elixir","programming","practice"],excerpt:"Some places to practice for simple problems for grasping patterns in a language\n\nProject Euler  \n\nAdvent of Code  \n\nExercism  \n\n"},{title:"Elixometer - Metrics for Elixr",link:"/reads/2016/03/elixometer-metrics-for-elixr",date:"March 1, 2016",category:null,tags:["read","elixir","elixometer","resource"],excerpt:"Elixometer is a metric collector for elixir applications which collects info from various part of the applications and displays nice..."},{title:"Nginx & Varnish Usage",link:"/reads/2016/02/nginx-varnish-usage",date:"February 20, 2016",category:null,tags:["read","nginx","varnish","usage","resource"],excerpt:"Posts for using nginx &amp; varnish Nginx: a caching, thumbnailing, reverse proxying image server? USING VARNISH CACHE AS A SECURED..."},{title:"Reads on RethinkDB",link:"/reads/2016/02/reads-on-rethinkdb",date:"February 15, 2016",category:null,tags:["read","rethinkdb","database","postgres","plugin"],excerpt:"RethinkDB is a open source realtime nosql database like Mongo but packed with several interesting features like changefeeds,realtime updates etc...."},{title:"Simple Chat App with rethinkdb & pheonix",link:"/reads/2016/02/simple-chat-app-with-rethinkdb-pheonix",date:"February 15, 2016",category:null,tags:["read","rethinkdb","chat","application","phoenix"],excerpt:"There is no official rethinkdb adapter for phoenix.But the community plug is very good and ready to be used in..."},{title:"Hackernews Bits - 13216",link:"/reads/2016/02/hackernews-bits-13216",date:"February 13, 2016",category:null,tags:["read","mjml","einstein","parity","framework","language"],excerpt:"Interesting bits and frameworks I found on hackernews for future read : Einstein\u2019s Zurich Notebook Parity - Ethereum client written..."},{title:"BigchainDB",link:"/reads/2016/02/bigchaindb",date:"February 12, 2016",category:null,tags:["read","bigchain","database"],excerpt:"A Database based on blockchain technology with ultra modern features. It is said to have the capicity for 1M w/s,linear..."},{title:"Server Side Elm with Phoenix",link:"/reads/2016/02/server-side-elm-with-phoenix",date:"February 11, 2016",category:null,tags:["read","elm","phoenix","render","server"],excerpt:"Server side rendering of view files of elm with phoenix on server\n\nServer side Elm with Phoenix  \n\n"},{title:"Guardian DB Elixir Auth Plug",link:"/reads/2016/02/guardian-db-elixir-auth-plug",date:"February 10, 2016",category:null,tags:["read","elixir","auth","jwt","guardian"],excerpt:"This is a excellent minimal authentication plug module for elixir goes well with uberauth. This tutorial explains everything pretty much..."},{title:"Comparison on usecase of different databases",link:"/reads/2016/02/comparison-on-usecase-of-different-databases",date:"February 5, 2016",category:null,tags:["read","database","comparison","usecase"],excerpt:"This is a really helpful post on all the popular databases,their descriptions and the use cases. These are the databases..."},{title:"Phoenix - Elixir : Places to look",link:"/reads/2016/02/phoenix-elixir-places-to-look",date:"February 4, 2016",category:null,tags:["read","elixir","phoenix","stickylink","resource","elm","webpack"],excerpt:"These are all the best places I can find for the solutions on phoenix and elixir in general. Elixir Status..."},{title:"RSS feeds for each Tags - Jekyll",link:"/blog/2016/01/rss-feeds-for-each-tags-jekyll",date:"January 27, 2016",category:null,tags:["blog","jekyll","rss"],excerpt:"Jekyll is a very popular and very powerful static blog generator. Out of the box it\u2019s able to generate sophisticated..."},{title:"Landmark Algorithm for Graph Isomorphism",link:"/reads/2015/12/landmark-algorithm-for-graph-isomorphism",date:"December 19, 2015",category:null,tags:["read","algorithm","learning","graph"],excerpt:"L\u00e1szl\u00f3 Babai, of the University of Chicago, announced that he had come up with a new algorithm for the \u201cgraph..."},{title:"Getting started with GraphQL",link:"/reads/2015/12/getting-started-with-graphql",date:"December 16, 2015",category:null,tags:["read","graphql","learning","query","language","resource"],excerpt:"GraphQL makes it easy for fetching the data models for client side developers and easy for server side developers to..."},{title:"Getting Started with Tensorflow",link:"/reads/2015/12/getting-started-with-tensorflow",date:"December 14, 2015",category:null,tags:["read","framework","tensorflow","learning","ai","data_science","artificial_intelligence"],excerpt:"Tensor Flow is AI i.e., artificial intelligence library for numerical computations using data flow graphs.It is opensourced by google recently...."},{title:"Onestop for Detailed Tutorials",link:"/reads/2015/12/onestop-for-detailed-tutorials",date:"December 12, 2015",category:null,tags:["read","language","learning","framework"],excerpt:"I always find myself wanting to learn a language or framework.Although they are many enriched blog posts and great docs,I..."},{title:"Embed Ejabberd in Phoenix App",link:"/reads/2015/12/embed-ejabberd-in-phoenix-app",date:"December 11, 2015",category:null,tags:["read","elixir","phoenix","ejabberd","webapp","learning"],excerpt:"Embedding Ejabberd into phoenix application to have a realtime messaging feature in our App.\n\nEmbed Ejabberd in Phoenix App  \n\n"},{title:"GraphQL introduction",link:"/videos/2015/12/graphql-introduction",date:"December 9, 2015",category:null,tags:["video","graphql","learning","language"],excerpt:"GraphQL is a data query language designed for product developers. This talk will discuss where it came from, why it\u2019s..."},{title:"MongoDB Playlist",link:"/videos/2015/12/mongodb-playlist",date:"December 4, 2015",category:null,tags:["video","mongo","database","learning","playlist"],excerpt:"Some playlists to learn MongoDB from beginner level to advance deployment stages. This will go through basics of MongoDB This..."},{title:"Elementary Contracts",link:"/blog/2015/12/elementary-contracts",date:"December 1, 2015",category:null,tags:["blog","elementary","ubuntu","contract"],excerpt:"This post contains exhaustive contracts that will be useful for elementary OS. You can use this on ubuntu also,but needs..."},{title:"Phoenix Framework Getting Started",link:"/videos/2015/12/phoenix-elixir-gettingstarted",date:"December 1, 2015",category:null,tags:["video","phoenix","elixir","language","framework"],excerpt:"Phoenix in Action and some introduction videos\n\n\n\n\n\n"},{title:"Elm Resources",link:"/reads/2015/11/elm-resources",date:"November 30, 2015",category:null,tags:["read","elm","learning","language","resource"],excerpt:"Some resources I read for learning Elm Pragmatic Studio - Elm Awesome-Elm Planet Elm Feed Aggregator Codecentric Blog on Starting..."},{title:"Sticky links",link:"/reads/2015/11/sticky-links",date:"November 28, 2015",category:null,tags:["read","es6","erlang","http2","note"],excerpt:"This post will have all interesting things that I would like to read and recommend other people.All the links are..."},{title:"Alchemy-Opensource AI",link:"/reads/2015/11/alchemy-opensource-ai",date:"November 27, 2015",category:null,tags:["read","alchemy","ai","opensource"],excerpt:"Alchemy is opensource AI project from washington edu.You can read more about Alchemy here.\n\nAlchemy AI  \n\n"},{title:"Javascript References",link:"/reads/2015/11/javascript-references",date:"November 26, 2015",category:null,tags:["read","javascript","reference","resource"],excerpt:"All the popular javascript resources and when to use which.\n\nJavascript references and usecases  \n\n"},{title:"Phoenix Resources",link:"/reads/2015/11/phoenix-resources",date:"November 22, 2015",category:null,tags:["read","phoenix","learning","resource"],excerpt:"Collection of All Resources for learning Phoenix. Awesome Elixir 30 Days of Elixir These are for Elixir which is phoenix..."},{title:"Phoenix with Elm - Alex Gardner",link:"/videos/2015/11/phoenix-with-elm-alex-gardner",date:"November 19, 2015",category:null,tags:["video","phoenix","elm","framework","language","elixir","erlang"],excerpt:"In this video Alex Gardner explains how to integrate Phoenix with Elm both of which are ground breaking frameworks of..."},{title:"Phoenix with Elm",link:"/reads/2015/11/phoenix-with-elm",date:"November 19, 2015",category:null,tags:["read","phoenix","elm","series","language","learn","elixir"],excerpt:"This post series explains how to mix and match Phoenix with Elm and make developing feel great. Phoenix With Elm..."},{title:"Using Phoenix with Mongo",link:"/reads/2015/11/using-phoenix-with-mongo",date:"November 19, 2015",category:null,tags:["read","phoenix","mongo","language","tutorial","learn","elixir"],excerpt:"If you\u2019re brand new to Phoenix then I would suggest going through Phoenix.You can also read this book from Pragmatic..."},{title:"Learning Elm-Playlist",link:"/videos/2015/11/learning-elm-playlist",date:"November 17, 2015",category:null,tags:["video","elm","playlist","learn","language"],excerpt:"Some playlists I found for learning Elm language by building a game.It explains in a step by step manner from..."},{title:"Editing Jekyll Posts With Prose",link:"/blog/2015/11/editing-jekyll-posts-with-prose",date:"November 14, 2015",category:null,tags:["blog","prose","jekyll","automate"],excerpt:"Jekyll supports markdown posts.We will discuss an online Github Content Editor Prose that can be used to edit jekyll posts.It..."},{title:"Automate Jekyll Blog to Github with Travis CI",link:"/blog/2015/11/jekyllRakeTravisCI",date:"November 11, 2015",category:null,tags:["blog","jekyll","rake","travis","deploy","automate"],excerpt:"In addition to supporting regular HTML content, GitHub Pages supports Jekyll, a simple, blog-aware static site generator. Jekyll makes it..."},{title:"Comparing Node.js Frameworks: Express, Hapi, LoopBack, Sailsjs and Meteor",link:"/videos/2015/03/comparenodejsframeworks",date:"March 24, 2015",category:null,tags:["video","framework","nodejs"],excerpt:"I have found a great video explaining various framework pros and cons and which might be suitable for various product.This..."},{title:"TED Talk about Sixth Sense",link:"/videos/2015/03/tedtalkpranavmistery",date:"March 23, 2015",category:null,tags:["video","sixthsense","ted","talk"],excerpt:"I admire this guy very much and I was inspired by him in my college days.Great talk and cool idea.It..."},{title:"Facebook open sources Augmented Traffic Control",link:"/reads/2015/03/facebookltesimulate",date:"March 23, 2015",category:null,tags:["read","facebook","opensource","technology"],excerpt:"Facebook developed a mind boggling tech that they opensourced on Github.Facebook today open-sourced Augmented Traffic Control (ATC), a Wi-Fi tool..."},{title:"My Experience with Unity",link:"/blog/2015/03/unityGameDev",date:"March 11, 2015",category:null,tags:["blog","unity","game","study"],excerpt:"This is the first time I have laid my hands on Unity.I got to admit that I never got my..."},{title:"SailsJS Pros & Cons",link:"/blog/2015/03/sailsjs_study",date:"March 11, 2015",category:null,tags:["blog","sailsjs","startup","study"],excerpt:"I have been researching on developing a web app.I have gone through various sites for the technology stack to rely..."},{title:"Python Snippets",link:"/blog/2015/03/pythonsnippets",date:"March 2, 2015",category:null,tags:["blog","code","python","snippet"],excerpt:"Hi there, Here is a set of small scripts, which demonstrate some features of Python programming. 1 2 3 4..."},{title:"Bash Snippets",link:"/blog/2015/03/bashsnippets",date:"March 2, 2015",category:null,tags:["blog","code","bash","snippet"],excerpt:"Set of small scripts, which demonstrate some features of bash programming. 1 2 3 4 5 6 7 8 //===================================================================================..."},{title:"Sql join queries - Interview questions",link:"/reads/2015/02/joinssqlinterview",date:"February 27, 2015",category:null,tags:["read","sql","interview"],excerpt:"COMPLEX JOINS : SQL SERVER JOINS QUERIES INTERVIEW QUESTIONS AND ANSWERS EXAMPLES FOR EXPERIENCED SET-7  \n\n"},{title:"Tags in Jekyll by Charlie Park",link:"/reads/2015/02/tagsinjekyllcharlieparker",date:"February 27, 2015",category:null,tags:["read","jekyll","code"],excerpt:"Tags In Jekyll  \n\n"},{title:"SQL Queries - Reference",link:"/reads/2015/02/sqlqueriescomplete",date:"February 27, 2015",category:null,tags:["read","sql","interview"],excerpt:"SQL Tutorial Home  \n\n"},{title:"Using Jekyll Plugins on Github Pages",link:"/reads/2015/02/jekyllpluginsongithub",date:"February 27, 2015",category:null,tags:["read","jekyll","github"],excerpt:"Using Jekyll Plugins on Github Pages  \n\n"},{title:"Java Interview Questions",link:"/reads/2015/02/javainterviewset",date:"February 27, 2015",category:null,tags:["read","java","interview"],excerpt:"Java Programming Interview Questions  \n\n"}];$.urlParam=function(a){var b=new RegExp("[?&]"+a+"=([^&#]*)").exec(window.location.href);if(b==null){return null}else{return b[1]||0}};function addParam(d,h,f){var b=document.createElement("a"),e=/(?:\?|&amp;|&)+([^=]+)(?:=([^&]*))*/g;var c,g=[];b.href=d;h=encodeURIComponent(h);while(c=e.exec(b.search)){if(h!=c[1]){g.push(c[1]+(c[2]?"="+c[2]:""))}}g.push(h+(f?"="+encodeURIComponent(f):""));b.search=g.join("&");return b.href}$.injectResults=function(d){var h=$("#search-results");query=decodeURIComponent(d.replace(/\+/g," "));$("input#search").val(query);var b=index.search(query);h.empty();h.prepend('<center><h2 style="background:#ad141e;border-radius: 20px;margin-bottom: 56px;color: white;" class="post_title">Found '+b.length+" result(s)</h2></center>");for(var f in b){var e=b[f].ref;var g='<li style="padding-top: 1rem;" class="s-post-list"><a style="float:left;font-size:1.1rem" class="title" href="'+store[e].link+'">'+store[e].title+'</a><div style="float:right;display:inline-block;">';var c=store[e].tags;for(var a in c){g+='<a class="tags" style="float:right" href="/tag/'+c[a]+'">'+c[a]+"</a>"}g+="</div></li>";h.append(g)}href=addParam(document.URL,"q",query);window.history.pushState("Revanth Revoori","Search for"+query+" Revanth's Blog",href)};$(document).ready(function(){if($.urlParam("q")){var a=$.urlParam("q");$.injectResults(a)}$("input#search").on("input",function(){var b=$(this).val();if(!this.value){$("#search-results").html('<center><h2> [Or] try multitag search ;)</h2><a href="/filtertags" id="s-tag-button">Multi Tag Search!</a></center>');window.history.pushState("Revanth Revoori","",addParam(document.URL,"q",""))}else{$.injectResults(b)}})});